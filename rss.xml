<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一点微小的博客</title>
  
  <subtitle>走向女装之路</subtitle>
  <link href="/rss.xml" rel="self"/>
  
  <link href="https://plusnan.me/"/>
  <updated>2019-02-05T06:47:10.759Z</updated>
  <id>https://plusnan.me/</id>
  
  <author>
    <name>InfNaN</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从Eclipse切换到IDEA（二）：古典Web项目的Project Structure</title>
    <link href="https://plusnan.me/2019/01/27/switch-to-idea-2/"/>
    <id>https://plusnan.me/2019/01/27/switch-to-idea-2/</id>
    <published>2019-01-26T16:00:00.000Z</published>
    <updated>2019-02-05T06:47:10.759Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍如何将古典Web项目（不使用Maven、Gradle等构建工具，jar包等全部手工配置）从Eclipse转换到IDEA，即古典项目的Project Structure。<br><a id="more"></a></p><h1 id="关于Project-Structure和Run-Configuration"><a href="#关于Project-Structure和Run-Configuration" class="headerlink" title="关于Project Structure和Run Configuration"></a>关于Project Structure和Run Configuration</h1><p>Project Structure即项目结构。配置Project Structure大体上就是在告诉IDEA以下几件事：</p><ol><li>项目用哪个JDK开发？</li><li>项目由哪些模块组成？这些模块之间有什么关系？</li><li>模块依赖哪些jar包？</li><li>模块有哪些特征？（例如是Web项目）</li><li>编译完成之后如何打包？</li></ol><p>Project Structure配置好之后就可以进行编译。</p><p>Run Configuration则是启动配置。它在告诉IDEA编译完成之后如何运行那些代码，所以在编译时不是必需的，但运行时是必需的。</p><h1 id="简单工程的Project-Structure"><a href="#简单工程的Project-Structure" class="headerlink" title="简单工程的Project Structure"></a>简单工程的Project Structure</h1><p>以一个Helloworld级的SpringMVC项目为例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt; HelloSpringMVC</span><br><span class="line">    &gt; src                       ----&gt; Java源代码</span><br><span class="line">    .   &gt; com</span><br><span class="line">    .       &gt; example</span><br><span class="line">    .           &gt; hello</span><br><span class="line">    .               &gt; controller</span><br><span class="line">    .                   HelloController.java</span><br><span class="line">    .               ...</span><br><span class="line">    &gt; config                    ----&gt; 公共配置文件</span><br><span class="line">    .   SpringMVC-servlet.xml</span><br><span class="line">    .   ...</span><br><span class="line">    &gt; WebContent                ----&gt; Web文件目录</span><br><span class="line">        &gt; components</span><br><span class="line">        .   &gt; jquery</span><br><span class="line">        .   ...</span><br><span class="line">        &gt; WEB-INF</span><br><span class="line">        .   &gt; lib</span><br><span class="line">        .   .   commons-logging-1.2.jar</span><br><span class="line">        .   .   ...</span><br><span class="line">        .   &gt; page</span><br><span class="line">        .   .   init.jsp</span><br><span class="line">        .   .   ...</span><br><span class="line">        .   web.xml</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p>直接用IDEA打开项目所在目录（HelloSpringMVC），它会尝试将Eclipse项目转化为IDEA项目（两IDE的配置文件可以同时存在，不会相互冲突），但是自动识别的文件结构并不正确，所以我们仍然需要通过“File”下面的“Project Structure”菜单重新配置项目。</p><p><img src="/img/2019-01-27-switch-to-idea-2/project-structure-0.png" alt="Project Structure对话框"></p><p>下面介绍每个页签的设置。注意，我们并不需要把每个参数都设置一遍，也不会严格按照页面选项的顺序进行操作。</p><h2 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h2><p>这一页内容比较简单，需要设置项目名称、JDK路径、支持的Java版本以及编译输出文件路径。其中Project compiler output放在哪里都行，只是不要不小心把编译出来的垃圾提交到代码库中。</p><h2 id="Libraries"><a href="#Libraries" class="headerlink" title="Libraries"></a>Libraries</h2><p>本页管理的是“应用使用了哪些jar包”。这里相当于把应用所需jar包“打了个捆”来管理，以便后面配置工程依赖项。</p><p><img src="/img/2019-01-27-switch-to-idea-2/idea-libraries.png" alt="Libraries"></p><p>没有特殊需求的话，将装jar包的目录（WebContent/WEB-INF/lib）添加成lib即可。</p><h2 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h2><p>IDEA没有Workspace的概念。和Eclipse中Project差不多的东西叫“Module”。一堆Module组成了一个Project。因为两边都有Project这个词语，所以小心不要把自己绕进去。</p><p>本页的作用是指出“项目由哪些模块构成”，有点像Eclipse里头的Build Path设置。另外Sources、Dependencies两个子页面也需要关注。</p><h3 id="Sources"><a href="#Sources" class="headerlink" title="Sources"></a>Sources</h3><p>Sources子页面的作用是指出“哪些是Java代码，哪些是资源文件，哪些是垃圾”。</p><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/img/2019-01-27-switch-to-idea-2/eclipse-modules-1.png" alt="2"></div><div class="group-picture-column" style="width: 50%;"><img src="/img/2019-01-27-switch-to-idea-2/idea-modules-1.png" alt="1"></div></div></div></div><p>IDEA将目录分成五类（Mark as后面五个）。其中Sources表示需要正常编译的Java代码，Resources表示打包时需要附到一起的文件，而Excluded表示将目录排除。</p><p>稍微提一下上图Eclipse里面的config，根据前面提到的文件结构，它并不是Java代码，在Eclipse里标记成Source Folder纯粹是为了便于查找。</p><div class="note info"><p>对于古典Web项目，Resources怎么标记都无所谓了，后面Artifacts配置正确就行。</p></div><h3 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h3><p>Dependencies子页面的作用是指出依赖关系（例如需要哪些jar包）。在依赖项管理上，IDEA和Eclipse也是既有相同之处也有不同之处。IDEA这边相当于把Eclipse的Projects、Libraries和Order and Export三个页签合并到一起了。</p><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 50%;"><img src="/img/2019-01-27-switch-to-idea-2/eclipse-modules-2.png" alt="2"></div><div class="group-picture-column" style="width: 50%;"><img src="/img/2019-01-27-switch-to-idea-2/idea-modules-2.png" alt="1"></div></div></div></div><p>这里面应当至少包含JDK（IDEA自动添加）、源代码中专门放jar包的目录和依赖的其他工程。如果使用了Tomcat和某些类，例如javax.servlet.ServletContext，我们还需要加入Tomcat。</p><div class="note info"><p>第一次设置时可能找不到所有依赖项，例如Library中没有Tomcat。我们可以先只配置一部分，等到后面设置Library甚至到编译运行出现编译错误时再回来继续配置依赖项。</p></div><p>Scope表示依赖程度：</p><ul><li>默认是Compile，也就是编译和打包时都要跟着放进去。</li><li>Runtime表示编译时不用编译，但后续运行时要跟着放在一起。</li><li>Provided表示打包时候不用跟着打，Tomcat等Web容器会提供。</li><li>Test表示只有测试时才参与。</li></ul><h2 id="Facets"><a href="#Facets" class="headerlink" title="Facets"></a>Facets</h2><p>本页面表示模块“有哪些特征”（例如Web、Spring等）。正确设置“特征”之后IDEA便可识别相应的配置文件。</p><p><img src="/img/2019-01-27-switch-to-idea-2/idea-facets.png" alt="1"></p><p>本项目是个简单的Web项目，其“特征”只有Web。添加特征可以从Facets或Modules两个页面进行操作。</p><p>对于Web项目，我们需要关注上面的“Web Module Deployment Descriptor”和下面的“Web Resources Directories”两个设置，前者表示web.xml所在位置，后者表示WebContent（即JSP等页面）的目录。</p><p>如果中间件有特殊设置，例如通过Tomcat的context.xml设置了数据源，那么可以点击“Add Application Server specific descriptor”按钮添加自定义配置文件，这样启动Tomcat时会加载你配置的context.xml的内容。</p><h2 id="Artifacts"><a href="#Artifacts" class="headerlink" title="Artifacts"></a>Artifacts</h2><p>本页面表示“编译完成之后如何打包”。</p><p>Eclipse中，类似功能是“Deployment Assembly”：</p><p><img src="/img/2019-01-27-switch-to-idea-2/eclipse-artifacts.png" alt="1"></p><p>回到IDEA。点加号可以看到多种打包方法。对于这个Web项目而言，建议选择“Web Application: Exploded”（散装，不打成war包）或“Web Application: Archive”（打成war包）。下面选择了散装：</p><p><img src="/img/2019-01-27-switch-to-idea-2/idea-artifacts.png" alt="1"></p><p>上图是已经配置好的结构。其中：</p><ul><li>‘HelloSpringMVC’ compile output表示编译好的class文件。</li><li>lib表示项目所依赖的jar包。</li><li>‘HelloSpringMVC’ module: ‘Web’ facet resources表示JSP等文件。需要在前面把Facets配置好才会出现。</li><li>‘config’ directory contents通过加号里的“Directory Content”配置，表示把某个目录里的文件直接拷过来。</li></ul><p>生成的文件就在Output directory中。如果不考虑数据源等配置，你可以在启动之后把这个目录里的东西拷走然后直接部署。</p><p>点击加号，可以看到以下几个菜单：</p><p><img src="/img/2019-01-27-switch-to-idea-2/idea-artifacts-2.png" alt="1"></p><p>这分别表示“要把哪种文件拷过来”：</p><ul><li>Library Files表示把jar包拷过来，前提是Libraries页面已经正确配置。</li><li>Module Output表示把编译好的class文件拷过来，前提是Modules页面已经正确配置。</li><li>Module Sources表示把源代码拷过来。</li><li>File、Directory Content分别表示把单个文件和整个目录的文件拷过来。</li><li>Extracted Directory表示把压缩包（例如zip、jar）内容解压之后拷过来。</li><li>JavaEE Facet Resources表示把Web项目的JSP等文件拷过来。</li></ul><p>如不熟悉配置，建议参照Eclipse的Deployment Assembly配置，并对比两个IDE生成出来的文件的结构。另外建议仔细检查和测试WEB-INF下面的配置，以免遗漏文件或者文件不更新（即第一次启动时复制过来了，后续这些文件即使修改过也未同步）。</p><p>截至这里，Project Structure就大体上配置好了。可以检查项目结构是否正确识别，然后准备配置Run Configuration并启动项目。</p><h1 id="稍微复杂一点"><a href="#稍微复杂一点" class="headerlink" title="稍微复杂一点"></a>稍微复杂一点</h1><p>以上是单模块的简单项目。下面让我们把项目结构弄复杂一点，使用两个Web项目和一个公共代码项目：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&gt; WebProj1                      ----&gt; Web项目1</span><br><span class="line">    &gt; src                       ----&gt; Java源代码1</span><br><span class="line">    .   ...</span><br><span class="line">    &gt; config                    ----&gt; 项目配置文件1</span><br><span class="line">    .   SpringMVC-servlet.xml</span><br><span class="line">    .   ...</span><br><span class="line">    &gt; WebContent                ----&gt; Web文件目录</span><br><span class="line">        &gt; WEB-INF</span><br><span class="line">        .   &gt; lib</span><br><span class="line">        .       ...</span><br><span class="line">        .   web.xml</span><br><span class="line">        .   ...</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">&gt; WebProj2                      ----&gt; Web项目2</span><br><span class="line">    &gt; src                       ----&gt; Java源代码2</span><br><span class="line">    .   ...</span><br><span class="line">    &gt; config                    ----&gt; 项目配置文件2</span><br><span class="line">    .   SpringMVC-servlet.xml</span><br><span class="line">    .   ...</span><br><span class="line">    &gt; WebContent                ----&gt; Web文件目录</span><br><span class="line">        &gt; WEB-INF</span><br><span class="line">        .   &gt; lib</span><br><span class="line">        .       ...</span><br><span class="line">        .   web.xml</span><br><span class="line">        .   ...</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">&gt; CommonProj                    ----&gt; 公共代码</span><br><span class="line">    &gt; src                       ----&gt; Java源代码</span><br><span class="line">    .   ...</span><br><span class="line">    &gt; commonConfig              ----&gt; 全局配置文件</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p>因为原理实际上是一样的，下面直接给出参考配置。</p><h2 id="Project-1"><a href="#Project-1" class="headerlink" title="Project"></a>Project</h2><p><img src="/img/2019-01-27-switch-to-idea-2/example2-1.png" alt="1"></p><h2 id="Libraries-1"><a href="#Libraries-1" class="headerlink" title="Libraries"></a>Libraries</h2><p><img src="/img/2019-01-27-switch-to-idea-2/example2-6.png" alt="1"></p><h2 id="Modules-1"><a href="#Modules-1" class="headerlink" title="Modules"></a>Modules</h2><p>一开始给出的Project可能是错误的，可以将其删除，然后重新添加。添加时点Import菜单来导入现有模块。由于WebProj1和WebProj2结构类似，下面只展示WebProj1的配置。</p><p><img src="/img/2019-01-27-switch-to-idea-2/example2-2.png" alt="1"><br><img src="/img/2019-01-27-switch-to-idea-2/example2-3.png" alt="2"><br><img src="/img/2019-01-27-switch-to-idea-2/example2-4.png" alt="3"></p><p>如果启动时CommonProj提示缺少类，可能是CommonProj的Dependencies需要补jar包。如果WebProj缺少javax的类，那么它们两个的Dependencies需要补Tomcat。</p><h2 id="Facets-1"><a href="#Facets-1" class="headerlink" title="Facets"></a>Facets</h2><p><img src="/img/2019-01-27-switch-to-idea-2/example2-5.png" alt="1"></p><h2 id="Artifacts-1"><a href="#Artifacts-1" class="headerlink" title="Artifacts"></a>Artifacts</h2><p><img src="/img/2019-01-27-switch-to-idea-2/example2-7.png" alt="1"></p><p>由图可见，因为CommonProj不是Web项目，无法单独启动，所以它没有单独的应用。全局配置文件则以“Directory Content”添加了过来。</p><h1 id="Run-Configuration"><a href="#Run-Configuration" class="headerlink" title="Run Configuration"></a>Run Configuration</h1><p>Project Structure配置好之后，就可以准备启动。点击IDEA界面右上角的“Add Configuration…”，或者“Run”菜单下面的“Edit Configurations”即可编辑启动设置。</p><p>启动配置界面如下。我们需要先在左侧添加Tomcat（菜单需要翻页才能找到），然后在右面进行设置。</p><p><img src="/img/2019-01-27-switch-to-idea-2/idea-run-1.png" alt="1"></p><p>如果Application server中没有应用服务器，或者版本与需求不一致，需要点击右边的Configure按钮配置应用服务器路径。其他设置按提示进行设置即可。</p><p>“On frame deactivation”的行为有点类似Eclipse在保存代码时进行热部署。不过IDEA里面不需要点保存按钮，触发条件就变成了窗口失去焦点，例如在运行期间修改一段代码之后点一下Dock（Windows系统是点任务栏）或者切换到浏览器，IDEA就会自动编译和热部署。</p><p>对话框下面是项目的构建步骤。构建至少要有两步，一个是编译Java代码（Build），另一个是打包（Build artifacts）。点击对话框上面的“Deployment”即可设置部署哪些应用：</p><p><img src="/img/2019-01-27-switch-to-idea-2/idea-run-2.png" alt="2"></p><p>可部署应用与Project Structure的Artifacts关联，具体设置则和Eclipse类似：</p><p><img src="/img/2019-01-27-switch-to-idea-2/eclipse-run.png" alt="2"></p><p>配置好之后即可点击运行按钮，确认项目能否启动。</p><div class="note info"><p>如果启动时候报错，提示找不到类，说明Project Structure里的Dependencies配置不完整，例如缺少某个jar包，或者项目间依赖关系配置不全，这种情况下需要回到Project Structure配置，检查并补充遗漏项。</p><p>另外，如果缺少的是“javax.servlet.ServletContext”等类，则需要在Dependencies中添加“Library”，然后在弹出的对话框中选择Tomcat（或类似中间件）。</p></div><h1 id="提交到版本控制"><a href="#提交到版本控制" class="headerlink" title="提交到版本控制"></a>提交到版本控制</h1><p>当Project Structure和启动设置配置完成，验证启动也没有问题，就可以将当前项目配置文件提交到版本控制，以便团队其他成员配置，也方便大家统一编辑器设置。</p><h2 id="检查系统设置"><a href="#检查系统设置" class="headerlink" title="检查系统设置"></a>检查系统设置</h2><p>有些系统设置和具体项目有关，会随着项目文件一同保存，例如文件编码、代码风格、编译器设置等。在正式投入开发之前建议统一标准，挨个检查一下，将这些参数设置好，然后借助版本控制与大家分享。</p><h2 id="提交配置文件"><a href="#提交配置文件" class="headerlink" title="提交配置文件"></a>提交配置文件</h2><p>如果项目使用Git，直接从GitHub上面取<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2dpdGh1Yi9naXRpZ25vcmUvYmxvYi9tYXN0ZXIvR2xvYmFsL0pldEJyYWlucy5naXRpZ25vcmU=" title="https://github.com/github/gitignore/blob/master/Global/JetBrains.gitignore">JetBrains.gitignore<i class="fa fa-external-link"></i></span>，维护成.gitignore即可得知哪些文件应当提交。</p><p>对于SVN项目，有一种比较快捷的方式是进入IDEA的Version Control窗口，检查其中未加入版本控制的文件。IDEA会自动隐藏.idea目录中不应当列入版本控制的文件，我们只需要根据实际需要提交展示出来的文件。</p><h1 id="本系列目录"><a href="#本系列目录" class="headerlink" title="本系列目录"></a>本系列目录</h1><ul><li><a href="/2018/12/12/switch-to-idea-0/">为什么进行切换</a></li><li><a href="/2018/12/13/switch-to-idea-1/">切换的基本操作</a></li><li><strong>古典Web项目在IDEA的Project Structure</strong></li><li>Maven和Gradle项目在IDEA的Project Structure（待撰）</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍如何将古典Web项目（不使用Maven、Gradle等构建工具，jar包等全部手工配置）从Eclipse转换到IDEA，即古典项目的Project Structure。&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="https://plusnan.me/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="IDEA" scheme="https://plusnan.me/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>作为非计算机专业的学生，如果只想考试及格以及过二级，如何学习C语言</title>
    <link href="https://plusnan.me/2019/01/13/how-to-learn-c/"/>
    <id>https://plusnan.me/2019/01/13/how-to-learn-c/</id>
    <published>2019-01-12T16:00:00.000Z</published>
    <updated>2019-01-13T14:44:49.379Z</updated>
    
    <content type="html"><![CDATA[<p>在学校上学的时候，曾经就这个问题专门给学弟们做过讲座，并且总结成了一篇文章。为了造福后辈，帮助后辈争取早日脱单，这里把以前写的内容修改一下发表出来，毕竟C语言课通常大一开，而且大一是提升妹子好感度，<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kv57SE5pyD5aSn5L2c5oiw" title="https://zh.wikipedia.org/wiki/約會大作戰">与其约会，使其娇羞<i class="fa fa-external-link"></i></span>的关键时期。</p><a id="more"></a><p>说实话，现代人都比较功利——既然是非计算机专业的学生，那么C语言基本上是个用不着的东西。可是，它还是门必修课，那最起码不能挂科，对吧？</p><p>内容很长，最好找个时间慢慢读。</p><h1 id="FIRST"><a href="#FIRST" class="headerlink" title="FIRST"></a>FIRST</h1><p>稍微了解一下C语言的历史，你就应该知道那个东西绝不是给孩子们入门用的——一开始它的应用是Unix操作系统，尽管创造Unix操作系统最初的目的是为了玩个<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kv5pif6ZmF5peF6KGMXygxOTY55bm05ri45oiP" title="https://zh.wikipedia.org/wiki/星际旅行_(1969年游戏">游戏<i class="fa fa-external-link"></i></span>)。</p><p>从这个角度讲，对于非计算机专业的学生来说，Pascal甚至Basic都比C语言靠谱。因为C语言对于他们而言过于灵活，暴露了很多让初学者迷惑的东西。而Pascal和Basic都很简单，而且Visual Basic还很好玩。</p><p>当然，虽然VB又简单又好玩，但是我们的老师成功地把VB讲成了一个比C语言还困难的语言，而且不是因为内容深，而是讲得不好。由此可见，<strong>编程语言学不好可能是门没入对</strong>。</p><p>很多人喜欢看清华大学出版社的谭浩强的书。但是请注意，虽然出版社名字带着“清华大学”四个字，但是这家出版社的书都是垃圾。清华大学出版社的书不仅无法把东西讲明白，而且还误导人（谭浩强书中甚至有根本跑不通的示例程序），拉低了清华大学学术水平的下限。因此大家不要买清华出版社的书，已经买的建议考虑扔掉或者送给关系不好的人。</p><p>如果有闲功夫的话，可以拜读一下C语言之父Dennis Ritchie（dmr）的《C程序设计语言》。这本入门书比大多数国产C语言书薄，但是是一部经典。毕竟是C语言亲爹写的。</p><h1 id="如何学习"><a href="#如何学习" class="headerlink" title="如何学习"></a>如何学习</h1><p>回答“只要多努力……”、“只要多练习……”当然没有意义，所以下面写一些个人经验。</p><p>注意，本文有一个前提——“非计算机专业”。因此我假设学完C语言基本上是为了通过考试和二级。</p><h2 id="新思维"><a href="#新思维" class="headerlink" title="新思维"></a>新思维</h2><p>大学每一科目都有自己的思维方式，C语言也一样。</p><p>C语言作为一门“语言”，当然有自己的语法，只不过是人类和机器约定好的、互相都能看得懂的语法。人类可以一目十行，但是对于机器而言，它只能一行一行地读、一句一句地读。</p><p>如果把每一条语句当作一件事儿，那么计算机当然是有条不紊地做事儿。写代码的时候，你当然也要一件事儿一件事儿地做。</p><p>因为我们学的是简单的单文件的C语言，所以实际上代码结构基本都是这样的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 输入</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意上面有“输入”、“处理”和“输出”三个阶段。做题的时候（编写练习程序和做题类似），我们需要按照题目要求逐步完善这三个阶段的内容，或者说按照题目要求填坑。至于能不能填上，就看你积累了多少“段子”——这和多做数学题积攒解题思路是差不多的。</p><p>填坑的时候有一个技巧：如果遇到困难，尽量先把题目的语言翻译成“像C语言的东西”。例如，“判断n是否为XX数，如果是则输出YES和全部的xxx，否则输出‘NO’”。那么首先应该能够想到，“判断”是if，因此：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (n是XX数)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">    <span class="comment">// 输出全部的xxx</span></span><br><span class="line">    <span class="built_in">printf</span>(全部xxx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那什么是“XX数”呢？看题目其他条件，例如“一个数恰好等于因子之和”，那么if语句应该是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (n == n的因子之和)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>“因子”之和怎么求呢？按照以往的练习，因子是用for语句找的，所以在if之前最起码得有个for语句：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;n; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (i是因子)</span><br><span class="line">    &#123;</span><br><span class="line">        sum=sum+i;    <span class="comment">// 不要忘记前面 sum=0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (n == sum)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>“是因子”实际上就是整除，即“n%i==0”。</p><p>假如题目还需要输出所有因子，那么我们不妨在找因子的时候把类似代码再敲一遍。因为我们是应付考试，不是参加ACM比赛，倒不需要太追求性能。</p><p>最后检查一下输入输出格式，把细节完善（见后面的“一一对应”），然后测试、调试，一切OK就可以提交了。如果考试是笔试，实在遇到困难，也可以用类似方法骗分。</p><h2 id="先问搜索引擎"><a href="#先问搜索引擎" class="headerlink" title="先问搜索引擎"></a>先问搜索引擎</h2><p>问问题是一门艺术。在错误的时间、错误的地点找错误的人问了错误的问题，那是要失败的。</p><p>学习编程会遇到很多问题，例如不会搭建开发环境、忘记某个函数的名字或参数、遇到错误，这时候不建议马上去问别人。不妨先自己尝试解决，如果解决不了，再到搜索引擎上搜索。</p><p>如果不会使用搜索引擎，可以看下图的操作说明（图片来自网络）：</p><p><img src="/img/2019-01-13-how-to-learn-c/baidu.jpg" alt="百度使用说明"></p><p>因为大多数语言和框架（在开发项目时，从零开始是不理智的）是老外写的，对于某些问题，如果你用英文搜索，可能会更快得到结果。这时候你可能就要想办法找谷歌了（备注：必应也行，至少免翻墙）。</p><p>在技术方面的中文搜索中，百度和谷歌区别不太大。百度经常有误导人的推广，但是在技术话题上这个问题并不明显。</p><p>在英文搜素方面，百度几乎不可用。谷歌最好（直接与StackOverflow整合），如果在网络方面遇到困难，也可以考虑必应。当然，因为很多外国网站使用谷歌服务器来加速（CDN），所以点进链接后可能会卡半天不出内容。遭遇这种情况的话，你还是需要先把网络问题解决一下。</p><p>因为全世界就连那个没网（全国网站地址是10开头的IP）的北朝鲜都在使用C语言，因此搜C语言本身的东西不会遇到太大困难。</p><h2 id="照猫画虎"><a href="#照猫画虎" class="headerlink" title="照猫画虎"></a>照猫画虎</h2><p>不要问别人“xxx怎么写”——照着书上的代码改，或者到搜索引擎上找代码，照着他们的代码改。</p><p>学习一门编程语言，很多时候找个老师不如<strong>找一段示例代码，照着敲一遍，编译运行，观察现象，然后对代码稍作修改，编译运行，观察产生了什么变化……</strong></p><p>需要注意的是，有些东西涉及算法（应该都是简单算法，不涉及数据结构），例如简单素数判断<span class="blackout">（素数测试有很多种）</span>。那么你需要找到一些现成的代码，搞清楚处理过程中哪些变量是输入、哪些是结果，了解大致的思路，然后自己写一遍。这种东西务必亲自上机写一遍，哪怕没有完全理解——光靠背是不现实的。</p><p>很多算法的套路是固定的，因此建议学过函数之后，自己编程的时候把它们都扔到函数里，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> number)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">2</span>; i&lt;number; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (number % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在做作业的时候直接<code>is_prime(a)</code>判断（别忘了把函数实现拷到作业里头），既方便又避免出错。</p><h2 id="一一对应"><a href="#一一对应" class="headerlink" title="一一对应"></a>一一对应</h2><p>编程是个比较严谨的东西。初学者在写代码的时候，为了避免出错，要注意“一一对应”：</p><ul><li>解答题目的时候，你的代码是否和题目条件、输入输出格式要求对应？</li><li>该写分号的地方是否写分号了？</li><li>不该写分号的地方是不是没写？（例如for (…;…;…)的后面不应该写，如果故意要写，最好用个注释说明一下）</li><li><p>printf、scanf中的“%d”（或别的什么）是否和后面的变量一一对应？数量、类型都对应了吗？</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">float</span> b;</span><br><span class="line">             第二个%d对应后面的b</span><br><span class="line">            |------|</span><br><span class="line">            v      v</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %f"</span>, a, b);</span><br><span class="line">        ^       ^</span><br><span class="line">        |-------|</span><br><span class="line">         第一个%d对应后面的a</span><br></pre></td></tr></table></figure><ul><li>假如后面不是int类型，你前面是否还在用“%d”？</li></ul></li><li>scanf后面有没有“&amp;”？</li><li>int main()、if、while、for等的圆括号是否匹配？后面是否跟了“{”和“}”并且数量匹配？<ul><li>虽然if、while、for后面代码只有一句时可以省略花括号，但是强烈建议你不要偷这个懒。</li></ul></li><li>在使用变量的时候，前面是否已经定义了？（例如要scanf n了，前面是否有int n？按照题目要求是不是应该为int？）</li><li>在使用“++”、“—”、“+=”等符号的时候，前面是否已经初始化了（说白了就是有没有让它先等于0）？<ul><li>初始化的值和初始化的位置是否正确？比方说有的应该放到for前头，有的应该放到for后头……</li></ul></li><li>数组大小是否不比题目要求的小？<ul><li>为了安全，建议开大点。例如题目说最大100，你就开110甚至是11000。反正贪污和浪费内存不是极大的犯罪（by 毛泽西）。</li></ul></li><li>头文件都写全了吗？<ul><li>为了安全，可以把你听说过的标准库的头文件都写上。实际上ACM比赛经常有人把能想到的头文件全都写上，结果#include写得比后面的具体实现还长。</li></ul></li></ul><h2 id="多试验"><a href="#多试验" class="headerlink" title="多试验"></a>多试验</h2><p>别怕试验。多写一些小片段，看看那些代码是怎样运行的。</p><p>举个例子——for循环到底执行了多少次：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i=<span class="number">12</span>; i&lt;<span class="number">15</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"A"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"i=%d\n"</span>, i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">12</span>; i&lt;=<span class="number">15</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"B"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"i=%d\n"</span>, i);</span><br></pre></td></tr></table></figure><p>scanf和gets的冲突：scanf和get紧挨着可能在输入数据时遇到问题，这时候需要一个小技巧……</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d\n"</span>, &amp;n);</span><br><span class="line">fgets(str, <span class="number">100</span>, <span class="built_in">stdin</span>);   <span class="comment">// 其实就是 gets(str) 的推荐写法</span></span><br><span class="line"><span class="built_in">puts</span>(str);                <span class="comment">// 如果那个scanf里没有“\n”，gets的时候……</span></span><br></pre></td></tr></table></figure><p>再举个例子（指针与一维数组）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[]=&#123;<span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">20</span>, <span class="number">22</span>, <span class="number">24</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> *p = a;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, &amp;a[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, p+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *(p+<span class="number">1</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, *p+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为只是为了看个结果，所以，只要自己能把结果弄明白，怎么舒服怎么来。</p><p>当然有个重要前提——你手头得有个电脑。如果没有电脑，或者“大一不让带”，可以买个几百或一两千的Win10平板，比手机便宜，而且便于隐藏和携带，既可防导员查寝，又可带教室去开小差。</p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>经常有人问“为什么我的代码结果不对”，然后贴上一段代码。这是非常令人讨厌的行为。</p><p>为了不被人鄙视，大家应该学一些调试的技巧。</p><p>作为非专业人士，与其学习那些复杂又难用的调试工具，不如学习又简单又实用的 printf。</p><p>printf有两大作用：定位错误、查看中间值。</p><p>假如程序崩溃了，可以这样调试：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> i, n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"准备读n\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"准备读a\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"开始处理\n"</span>);</span><br></pre></td></tr></table></figure><p>假如崩溃的时候屏幕上面只有“准备读n”而没有“准备读a”，说明中间夹着的scanf有问题；假如崩溃的时候有“准备读a”而没有“开始处理”，说明中间夹着的for有问题，这样你可以在for语句内部插入一些<code>printf(&quot;a\n&quot;)</code>，从而精确地找到错误的出处（例如，崩溃的时候看到10个a，说明数组开得不够大）。</p><p>如果计算结果不正确，可以这样调试（筛法求素数）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i, num, isprime;</span><br><span class="line">isprime = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (num=<span class="number">2</span>; num&lt;<span class="number">10</span>; num++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">2</span>; i&lt;num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (num % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"DEBUG: %d不是素数(╯°Д°)╯︵ ┻━┻\n"</span>, num);</span><br><span class="line">            isprime = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"DEBUG: %d 是素数吗？%d\n"</span>, num, isprime);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isprime)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果只有2和3。通过观察调试输出，发现程序认为5不是素数。按理说，如果不是素数，屏幕会输出一个掀桌子的表情。然而程序认为5不是素数，但是还没有掀桌子表情，说明问题出在isprime变量上面——<code>isprime=1</code>的位置不对。</p><p>当然，交作业的时候别忘了把这种输出删掉。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>不要把测试和调试搞混。用一句话概括它们的区别：测试是为了观察“程序结果是否正确”，而调试是为了“找到程序的错误”。</p><p>很多初学者经常不做测试，或者不做充分的测试就提交，然后遇到问题就反复改，反复提交。这样也是不好的。</p><p>Online Judge网站就是测试的一种：系统预置了一系列数据和答案，按照题目要求解题、提交，系统会自动编译和运行代码，检查程序是否能在规定时间内处理预定输入并得到正确结果。在比赛中，错误提交是要影响成绩的，因此选手必须要学会自己测试，争取一次提交就通过。</p><p>程序编译通过之后，当然要用数据检验一下结果。如果把样例输入敲进去结果都不对，那程序肯定不行。</p><p>光通过样例也是不行的。为了保证通过，你应该自行构造多个输入，观察输出是否正确。应从以下几个角度构造数据：</p><ol><li>守规矩的计算</li><li>不守规矩的计算：如果题目没做保证，那么应假设有非法数据。假如题目没说a一定大于0，那你有没有想到a可以等于0或-1？</li><li>多种情况：假如程序有多种结果（Yes/No），你是否都测试到了？</li><li>边界条件：假如最多100个人，那么你的程序在恰好输入100个人的情况下能否正常工作？<ul><li>没有人或只有1个人呢？</li><li>稍微提一下，假如数组有100个元素（int a[100]），访问a[100]是非法的，但是在你自己电脑上不一定报错。这是一个隐藏的错误。为了避免这种错误，可以把数组开大一些，例如200甚至10000。</li></ul></li></ol><p>除此之外，初学者常常忽略的问题有空格（一个空格、两个空格、多个空格、行末空格）、回车（例如最后一行的回车）、字母大小写和符号全半角，还有不明显的格式差别（例如题目要求用逗号分隔你却用了空格）。因为测试是全文逐字比较的，所以不要犯这种低级错误。</p><h2 id="养成好习惯"><a href="#养成好习惯" class="headerlink" title="养成好习惯"></a>养成好习惯</h2><p>建议大家照做，因为这样可以避免很多不必要的错误：</p><ul><li>如果你不知道全角符号<code>，。、（）</code>和半角符号<code>,.\()</code>有什么区别，那么建议你写代码的时候把输入法关掉，免得出现莫名其妙的错误。</li><li>不同功能（定义变量、输入、数据处理、输出）之间留点空行，也就是按功能分块，就像前面提到的那样。</li><li>接上条，如果代码太长，那么最好多用一些函数，把各功能分离出来。写代码的时候一个功能一个功能地写。没有人喜欢又长又臭的代码。</li><li>缩进，一定要保持代码的缩进。没有缩进的代码难以理解，而且很有可能丢花括号，从而造成不必要的麻烦。</li><li>使用“黑科技”（不解释就难以理解）的时候要加注释。</li><li>if、for等语句后面可以不加花括号对吧？别懒，把花括号加上，免得犯这样的错误：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a &gt; b)</span><br><span class="line">    c=a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,c);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    c=b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,c);</span><br></pre></td></tr></table></figure><h1 id="如何通过二级"><a href="#如何通过二级" class="headerlink" title="如何通过二级"></a>如何通过二级</h1><p>这是也很多人关心的问题。虽然事实上计算机二级比英语六级容易通过（对于985、211的学生来说，只要英语三级也就是高考成绩不太烂，英语四级裸奔也能过……），但是很多人还是没通过。这不是他们不刻苦或者学得不好，而是因为他们不知道如何对付一个考证级别的考试。对，和英语四六级有着本质的区别。</p><p>首先用一句话概括通过计算机三级和四级的武林秘籍：去购买高等教育出版社的、封面上带个大大的黄色字母K的官方题库（不是教材），从头到尾把题刷一遍，该背的试题背下来，如果还没通过那你肯定是没好好背。</p><h2 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h2><p>虽然二级过了三四级成绩才能算数，但是，之所以先介绍三四级，是因为三四级比二级好过——三四级基本上可以纯背，但二级还是要会点东西的。下面就介绍介绍二级C语言：</p><ul><li>选择题40分，大题（改错、填空、编程）60分。</li><li>上机考试，先做选择题，选择题全部做完才能做大题。做选择的时候电脑屏幕是锁死的，做大题的时候才能使用编程软件。</li><li>题目是从题库里随机抽的，所以不要尝试照旁边的人抄。当然，运气好的话，你会碰到和官方教材中差不多的题。撞大题的概率更高。</li><li>选择题中至少有20~30分来自“二级公共语言基础”，这个“公共语言基础”大致分成两类，一类是“算法与数据结构”，需要你去理解一些东西；另一类不管它是啥，反正是纯粹要背的东西。剩下的选择题和C语言本身有关。</li><li>C语言课的东西够用了，关键是你对考试出题的基本法的了解程度。</li><li>编程软件是钦点的Visual C++ 6.0，虽然它是盗版的，虽然它很可能无法在你自己的电脑上正常运行。</li><li>二级考完只有三种状态：没通过（&lt;60分）、合格（60~89分）、优秀（90~100分）。因此，如果你不打算拿优秀证，考60和考89没有任何区别。（在这一点上，英语四六级就不一样——证书上面把成绩写出来了）</li><li>因为计算机二三四级证书都很水，因此，求职时如果应聘条件没有明确要求，不要指望拿这些证书给自己贴金。虽然二级可能是很多岗位的基本条件之一。</li><li>最后，如果你想考三四级，一定要看清楚对应科目对二级的要求——是要求通过编程语言类的二级还是数据库语言类的二级。如果你二级报的是Office那还是别考三四级了。</li></ul><h2 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h2><p>如果你觉得大题把握很大，而且没有拿优秀证的打算，那么“二级公共语言基础”的东西就可以少背一点了。反之要多背一些。</p><p>“算法和数据结构”是一个不太容易懂的东西——如果学得很好，没准就可以去打ACM比赛了。既然是个只需要拿60分的考证，那么不妨把官方教材拿出来，看看他们喜欢怎样出题，把相关考点记住即可。</p><p>有关C语言本身的选择题，实在不懂也不必太较真，因为它可能没有意义：例如经典的<code>a+=a-=a*a;</code>和<code>a=a++;</code>都是未定义行为——连C语言标准对这些语句的结果都没做任何保证，所以肯定没有正确答案。</p><h2 id="大题"><a href="#大题" class="headerlink" title="大题"></a>大题</h2><p>大题是一定要会的。如果你没有精心准备，选择题分数可能会惨不忍睹，因此大题要尽量把分数都弄到手。</p><p>为了把分数搞到手，我们要从两方面准备，一方面是正确解答题目，另一方面是正确地解答题目。</p><h3 id="正确解答题目"><a href="#正确解答题目" class="headerlink" title="正确解答题目"></a>正确解答题目</h3><p>大题分为改错、填空、编程。</p><p>改错就很简单了。因为改错的模式都比较固定，只要多看看官方的题目就应该清楚他们会怎样考了。</p><p>填空也一样。一般是让你填一些“单词”，或者是些简单的表达式。填空时候要多留意已经定义和未使用的变量。</p><p>其实吧，改错和填空题很多时候就是<strong>推理</strong>题——不用太清楚程序干嘛，只要保证所有变量都被用过了，该对应的地方都对应了，OK。</p><p>编程题要注意：数组、指针和字符串对于初学者来说比较难理解，对吧？不幸的是，出题人也爱考这些东西。因此，还是要看官方教材，看看他们喜欢怎样出题，并且建议你在做这些题的时候亲自上机练习一下。</p><h3 id="正确地解答题目"><a href="#正确地解答题目" class="headerlink" title="正确地解答题目"></a>正确地解答题目</h3><p>两个要点：一是不犯低级错误，二是要会用Visual C++ 6.0编辑代码。</p><p>不犯低级错误，举个例子，题目提示<code>只修改/******* FOUND *******/下一行的代码</code>，那么你不要改其他地方的代码，也不要把这个注释本身修改或删除。此外尽量不要碰原有代码的其他部分，例如空格和缩进。</p><p>Visual C++ 6.0是一个古老的软件了（1998年发布），在现代操作系统（Windows 8/8.1/10）中会出现兼容性问题，甚至无法启动。因此，平时在自己电脑上练习的时候可以使用其他编程软件，然后考前去一趟机房（学校机房应该安装了Visual C++ 6.0），学会如何打开和保存代码（考试软件会帮你打开代码）、如何找到<code>int main()</code>、如何编译运行。知道这些就足够了。</p><p><img src="/img/2019-01-13-how-to-learn-c/vc.png" alt="会点上面三个按钮就够了"></p><p>会点上面三个按钮就够了。</p><h1 id="拓展学习"><a href="#拓展学习" class="headerlink" title="拓展学习"></a>拓展学习</h1><p>对于非计算机专业的学生来说，尽管C语言很难学，尽管C语言<span class="blackout">看起来</span>“不实用”，但是很多编程语言的套路都是类似的，因此学完C语言有助于其他“实用”语言的学习。有些“实用”语言甚至直接向C语言致敬，例如PHP。</p><p>以下是一些当下很流行的、学起来可以“实用”的编程语言，如果有兴趣的话可以学一学。</p><ul><li>HTML+CSS+JavaScript：做网页的一套语言，虽然是三个，但是实际上哪个都不需要学得太深——一方面需要什么东西可以自己去查，另一方面现成框架太多了，很多时候用不着从零开始。我个人建议不要用Dreamweaver，即使用也要用最新的Dreamweaver CC，否则容易落伍。</li><li>PHP：想做个实用网站吗？学吧！就是它大量致敬了C语言的语法！<ul><li>由于PHP学习门槛很低，因此很容易写出有大量安全漏洞的网站。做项目时要多加小心。</li></ul></li><li>Python：Python是个小巧而又强大的脚本语言。建议有兴趣的一定要学。<ul><li>如果想写一个随写随用的程序，当然要找它；</li><li>如果想做一个实用的网站，同样可以找它——可以学习基于Python语言的Django框架；</li><li>如果想做一个带窗口对话框的程序，当然也可以找它——可以学习基于Python语言和Qt的PyQt框架。对于这种情况，建议同时学习PyQt和Qt C++。</li><li>Python有两种版本，一个是2.7，一个是3.6。它们两个有些差别，但是实际上不影响学习。遇到困难时到搜索引擎上搜一下就行了。</li></ul></li><li>Visual C#：C++和C#都带个“C”，那它们当然是从C语言衍生过来的……学C语言写不出一个带窗口对话框的程序对吧，没关系，我们可以用一个好学的Visual C#，随手画个窗口出来！</li><li>Qt C++：同样是用来制作带窗口对话框程序的，只不过这个是C++语言。</li><li>Java：会写Java至少能混口饭吃，而且现在很多业务系统和Android应用都是拿Java写的。</li><li>Objective-C：iOS应用是拿这个语言写的（备注：现在已经换成Swift，所以不用学Objective-C了），只不过进App Store的门槛有点高。</li><li>MATLAB：数值计算、数值模拟必备。一定先把高等数学和线性代数学好然后再学这个……</li></ul><p>我不推荐Pascal和Basic，前者用的人数不多，后者……VB6也是1998年的东西，在现在的系统中已经不能正常运行了，而且学新版VB不如学C#。</p><p>另外还有两个硬件（小心，玩硬件烧钱）：</p><ul><li>Arduino：Arduino是一个卡片大小的开发板（如果不知道开发板是啥——就是可以让你拿来写程序的电路板），编程的时候基本上就是C或C++。与电路相关的东西都是封装好的，可以直接调用函数，所以不会一开始就被一些细枝末节困扰。虽然玩51单片机（备注：51单片机通常是STC产的，其<span class="exturl" data-url="aHR0cDovL3d3dy5zdGNtY3UuY29t" title="http://www.stcmcu.com">官网<i class="fa fa-external-link"></i></span>和牛皮癣小广告有一拼）的人更多，但是我觉得从Arduino入门会容易很多。深入之后也可以考虑玩STM32之类的单片机。</li><li>树莓派：树莓派是一个卡片大小的单板电脑。虽然设计者的定位是儿童电脑，不过实际上被极客当成高级玩具了。最新的树莓派3可以跑Linux和Windows 10（物联网版）系统，对物联网感兴趣的可以玩玩。</li></ul><p>我个人的学习建议：</p><ol><li>尽量找外文书的中译本，原因很简单，翻译一本书需要付出大量时间精力，因此能够被拿来翻译的书基本上都是好书。<span>因为写书很容易，因此国内很容易出烂书。外国的月亮也不圆——外国也一样。</span></li><li>把书粗读一遍，大致了解一下基本语法。很多语言的基本结构都差不多，只不过单词不一样罢了。</li><li>细读，看看（特别是翻译本那种）作者的思想和思路。</li><li>照着教材做个小练习。</li><li>不用强求把所有东西都记住。现在网络那么发达，甚至手机流量都不需要省着用，有问题可以直接去网上查。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在学校上学的时候，曾经就这个问题专门给学弟们做过讲座，并且总结成了一篇文章。为了造福后辈，帮助后辈争取早日脱单，这里把以前写的内容修改一下发表出来，毕竟C语言课通常大一开，而且大一是提升妹子好感度，&lt;a href=&quot;https://zh.wikipedia.org/wiki/約會大作戰&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;与其约会，使其娇羞&lt;/a&gt;的关键时期。&lt;/p&gt;
    
    </summary>
    
      <category term="闲谈" scheme="https://plusnan.me/categories/%E9%97%B2%E8%B0%88/"/>
    
    
      <category term="C" scheme="https://plusnan.me/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>通过数据库“阅读器”在上班时间看小说</title>
    <link href="https://plusnan.me/2019/01/11/oracle-novel/"/>
    <id>https://plusnan.me/2019/01/11/oracle-novel/</id>
    <published>2019-01-10T16:00:00.000Z</published>
    <updated>2019-01-14T02:18:16.443Z</updated>
    
    <content type="html"><![CDATA[<p>上班时间看小说有很多种方式，例如直接拿手机看，在浏览器上面看，用小说阅读器看，拷到Word里面看，甚至拷到Eclipse里面看……然而，这几种方式看起来都比较显眼，就算放在Eclipse上面看起来也不太自然（方块字又多又密，而且没有语法高亮，一看就不像程序代码）。在此，本文针对软件开发和运维人员介绍一种可以大大方方在上班时间看小说而且不会引起怀疑的方法——在数据库客户端里面看小说。</p><a id="more"></a><h1 id="建库"><a href="#建库" class="headerlink" title="建库"></a>建库</h1><p>如果开发团队管得不严，那么使用团队正在使用的数据库就行，反正领导和人力部门又不可能专门登数据库去看你搞了什么东西。为了避免与其他同事产生误会，建议创建小说专用账号，例如OGGFORWARD（用这个名词也要小心，别让DBA误会）：</p><div class="tabs" id="创建账号"><ul class="nav-tabs"><li class="tab active"><a href="#创建账号-1">Oracle</a></li><li class="tab"><a href="#创建账号-2">MySQL</a></li></ul><div class="tab-content"><div class="tab-pane active" id="创建账号-1"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建立OGG传输专用账号</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> OGGFORWARD <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> eromanga;</span><br><span class="line"><span class="comment">-- 允许登录OGG账号</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">CONNECT</span>, <span class="keyword">RESOURCE</span>, DBA <span class="keyword">TO</span> OGGFORWARD;</span><br><span class="line"><span class="comment">-- 允许OGG账户访问当前账户所用表</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">FOR</span> TAB <span class="keyword">IN</span> (<span class="keyword">SELECT</span> TABLE_NAME <span class="keyword">FROM</span> USER_TABLES) <span class="keyword">LOOP</span></span><br><span class="line">        <span class="keyword">EXECUTE</span> <span class="keyword">IMMEDIATE</span> <span class="string">'GRANT SELECT, INSERT, UPDATE, DELETE ON '</span>||TAB.TABLE_NAME||<span class="string">' TO OGGFORWARD'</span>;</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">LOOP</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="创建账号-2"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建立数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> oggforward <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> utf8;</span><br><span class="line"><span class="comment">-- 建立OGG传输专用账号</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> oggforward@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'eromanga'</span>;</span><br><span class="line"><span class="comment">-- 赋权</span></span><br><span class="line"><span class="keyword">GRANT</span> ALL <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> oggforward.* <span class="keyword">TO</span> oggforward@<span class="string">'%'</span>;</span><br></pre></td></tr></table></figure></div></div></div><p>以上只是些普通的DBA操作，看起来没什么值得怀疑的。若你连DBA权限都没有，那么就需要自己搭数据库或者想办法骗DBA给你开个账号了。</p><p>接下来用OGGFORWARD登录，建立表结构：</p><div class="tabs" id="建立表结构"><ul class="nav-tabs"><li class="tab active"><a href="#建立表结构-1">Oracle</a></li><li class="tab"><a href="#建立表结构-2">MySQL</a></li></ul><div class="tab-content"><div class="tab-pane active" id="建立表结构-1"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 《情色漫畫老師》（中国大陆译作《埃罗芒阿老师》）</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SEQUENCE</span> OGGFORWARD.SEQ_TBL_EROMANGA <span class="keyword">START</span> <span class="keyword">WITH</span> <span class="number">1</span> <span class="keyword">INCREMENT</span> <span class="keyword">BY</span> <span class="number">1</span> <span class="keyword">NOMAXVALUE</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> OGGFORWARD.TBL_EROMANGA (</span><br><span class="line">    <span class="keyword">ID</span> <span class="built_in">NUMBER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>        <span class="comment">-- 主键</span></span><br><span class="line">        <span class="keyword">CONSTRAINT</span> PK_TBL_EROMANGA PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    BOOK VARCHAR2(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,    <span class="comment">-- 第几作</span></span><br><span class="line">    CHAPTER VARCHAR2(<span class="number">50</span>),           <span class="comment">-- 章节</span></span><br><span class="line">    <span class="built_in">TEXT</span> VARCHAR2(<span class="number">700</span>),             <span class="comment">-- 小说内容，为便于阅读，每行只留200字</span></span><br><span class="line">    IS_READ <span class="built_in">CHAR</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,    <span class="comment">-- 是否已经阅读</span></span><br><span class="line">    ACCESS_TIME <span class="built_in">DATE</span>                <span class="comment">-- 阅读时间</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="建立表结构-2"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 《情色漫畫老師》（中国大陆译作《埃罗芒阿老师》）</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> oggforward.tbl_eromanga (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,     <span class="comment">-- 主键</span></span><br><span class="line">    book <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,         <span class="comment">-- 第几作</span></span><br><span class="line">    chapter <span class="built_in">VARCHAR</span>(<span class="number">50</span>),                <span class="comment">-- 章节</span></span><br><span class="line">    <span class="built_in">text</span> <span class="built_in">VARCHAR</span>(<span class="number">700</span>),                  <span class="comment">-- 小说内容，为便于阅读，每行只留200字</span></span><br><span class="line">    is_read <span class="built_in">CHAR</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,        <span class="comment">-- 是否已经阅读</span></span><br><span class="line">    access_time <span class="built_in">DATE</span>,                   <span class="comment">-- 阅读时间</span></span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure></div></div></div><p>毕竟是你自己看的，怎么建都无所谓，但是应该要有ID（便于定位和排序），要区分出是哪本小说，另外也可以加一些伪装用的字段，显得像是在操作自己项目中的表一样。</p><h1 id="导入小说"><a href="#导入小说" class="headerlink" title="导入小说"></a>导入小说</h1><p>这一点比较关键，你需要先将小说下载下来，弄成TXT格式，然后编写一个导入程序，将其导入到数据库中。导入的时候需要注意字段长度和断行。建议在程序里面适当断行，不要一段话一口气写到底，这样查询的时候看起来方便。</p><div class="note warning"><p>注意文件字符编码！虽然实际上小说TXT用GB2312编码的情况更多，但是本文假设使用的是UTF-8。</p></div><h2 id="Java程序"><a href="#Java程序" class="headerlink" title="Java程序"></a>Java程序</h2><p>ImportUtils.java：</p><div class="tabs" id="java"><ul class="nav-tabs"><li class="tab active"><a href="#java-1">Oracle</a></li><li class="tab"><a href="#java-2">MySQL</a></li></ul><div class="tab-content"><div class="tab-pane active" id="java-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文本导入工具</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImportUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String DB_CONNSTR = <span class="string">"jdbc:oracle:thin:@数据库IP地址:1521:数据库实例名"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String DB_USERNAME = <span class="string">"OGGFORWARD"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String DB_PASSWORD = <span class="string">"eromanga"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String INSERT_SQL = <span class="string">"INSERT INTO TBL_EROMANGA (ID, BOOK, CHAPTER, TEXT) VALUES (SEQ_TBL_EROMANGA.NEXTVAL, ?, ?, ?)"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUERY_SQL = <span class="string">"SELECT COUNT(1) FROM TBL_EROMANGA WHERE BOOK=? AND CHAPTER=?"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否移除两段文字之间多出来的一个空行</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">boolean</span> REMOVE_EXTRA_BLANK_LINE = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 每条记录最大字数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> LINE_WIDTH = <span class="number">70</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 加载Oracle驱动</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"oracle.jdbc.OracleDriver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">"错误：未找到ojdbc.jar！"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取参数</span></span><br><span class="line">        <span class="keyword">if</span> (args.length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">"java ImportUtils &lt;BOOK&gt; &lt;CHAPTER&gt; &lt;FILENAME&gt;"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String book = args[<span class="number">0</span>];</span><br><span class="line">        String chapter = args[<span class="number">1</span>];</span><br><span class="line">        String fileName = args[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (Connection conn = DriverManager.getConnection(DB_CONNSTR, DB_USERNAME, DB_PASSWORD)) &#123;</span><br><span class="line">            <span class="comment">// 可选 - 检查是否重复导入</span></span><br><span class="line">            <span class="keyword">try</span> (PreparedStatement stmt = conn.prepareStatement(QUERY_SQL)) &#123;</span><br><span class="line">                stmt.setString(<span class="number">1</span>, book);</span><br><span class="line">                stmt.setString(<span class="number">2</span>, chapter);</span><br><span class="line">                <span class="keyword">try</span> (ResultSet rs = stmt.executeQuery()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                        <span class="keyword">int</span> len = rs.getInt(<span class="number">1</span>);</span><br><span class="line">                        <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            System.out.println(<span class="string">"您似乎已经导入过了，是否继续（Y/N）？"</span>);</span><br><span class="line">                            Scanner cin = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">                            String read = cin.nextLine();</span><br><span class="line">                            <span class="keyword">if</span> (!<span class="string">"Y"</span>.equals(read.toUpperCase().trim())) &#123;</span><br><span class="line">                                <span class="keyword">return</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">try</span> (Scanner scanner = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> File(fileName));</span><br><span class="line">                 PreparedStatement stmt = conn.prepareStatement(INSERT_SQL)) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> isLastEmptyLine = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">                    String line = scanner.nextLine();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (REMOVE_EXTRA_BLANK_LINE &amp;&amp; line.trim().length() == <span class="number">0</span> &amp;&amp; !isLastEmptyLine) &#123;</span><br><span class="line">                        isLastEmptyLine = <span class="keyword">true</span>;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    isLastEmptyLine = (line.length() == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 按长度分割并插入数据库</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; line.length(); i += LINE_WIDTH) &#123;</span><br><span class="line">                        String part = line.substring(i, Math.min(i + LINE_WIDTH, line.length()));</span><br><span class="line">                        stmt.setString(<span class="number">1</span>, book);</span><br><span class="line">                        stmt.setString(<span class="number">2</span>, chapter);</span><br><span class="line">                        stmt.setString(<span class="number">3</span>, part);</span><br><span class="line">                        stmt.addBatch();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                stmt.executeBatch();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException | IOException e) &#123;</span><br><span class="line">                conn.rollback();</span><br><span class="line">                conn.setAutoCommit(<span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">            conn.commit();</span><br><span class="line">            conn.setAutoCommit(<span class="keyword">true</span>);</span><br><span class="line">            System.out.println(<span class="string">"导入完成！"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException | IOException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">"导入时发生错误！"</span>);</span><br><span class="line">            e.printStackTrace(System.err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="java-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文本导入工具</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImportUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String DB_CONNSTR = <span class="string">"jdbc:mysql://数据库IP地址:3306/oggforward"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String DB_USERNAME = <span class="string">"oggforward"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String DB_PASSWORD = <span class="string">"eromanga"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String INSERT_SQL = <span class="string">"INSERT INTO tbl_eromanga (book, chapter, text) VALUES (?, ?, ?)"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUERY_SQL = <span class="string">"SELECT count(1) FROM tbl_eromanga WHERE book=? AND chapter=?"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否移除两段文字之间多出来的一个空行</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">boolean</span> REMOVE_EXTRA_BLANK_LINE = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 每条记录最大字数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> LINE_WIDTH = <span class="number">70</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 加载Oracle驱动</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">"错误：未找到mysql-connector-java.jar！"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取参数</span></span><br><span class="line">        <span class="keyword">if</span> (args.length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">"java ImportUtils &lt;BOOK&gt; &lt;CHAPTER&gt; &lt;FILENAME&gt;"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String book = args[<span class="number">0</span>];</span><br><span class="line">        String chapter = args[<span class="number">1</span>];</span><br><span class="line">        String fileName = args[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (Connection conn = DriverManager.getConnection(DB_CONNSTR, DB_USERNAME, DB_PASSWORD)) &#123;</span><br><span class="line">            <span class="comment">// 可选 - 检查是否重复导入</span></span><br><span class="line">            <span class="keyword">try</span> (PreparedStatement stmt = conn.prepareStatement(QUERY_SQL)) &#123;</span><br><span class="line">                stmt.setString(<span class="number">1</span>, book);</span><br><span class="line">                stmt.setString(<span class="number">2</span>, chapter);</span><br><span class="line">                <span class="keyword">try</span> (ResultSet rs = stmt.executeQuery()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                        <span class="keyword">int</span> len = rs.getInt(<span class="number">1</span>);</span><br><span class="line">                        <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            System.out.println(<span class="string">"您似乎已经导入过了，是否继续（Y/N）？"</span>);</span><br><span class="line">                            Scanner cin = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">                            String read = cin.nextLine();</span><br><span class="line">                            <span class="keyword">if</span> (!<span class="string">"Y"</span>.equals(read.toUpperCase().trim())) &#123;</span><br><span class="line">                                <span class="keyword">return</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">try</span> (Scanner scanner = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> File(fileName));</span><br><span class="line">                 PreparedStatement stmt = conn.prepareStatement(INSERT_SQL)) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> isLastEmptyLine = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">                    String line = scanner.nextLine();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (REMOVE_EXTRA_BLANK_LINE &amp;&amp; line.trim().length() == <span class="number">0</span> &amp;&amp; !isLastEmptyLine) &#123;</span><br><span class="line">                        isLastEmptyLine = <span class="keyword">true</span>;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    isLastEmptyLine = (line.length() == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 按长度分割并插入数据库</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; line.length(); i += LINE_WIDTH) &#123;</span><br><span class="line">                        String part = line.substring(i, Math.min(i + LINE_WIDTH, line.length()));</span><br><span class="line">                        stmt.setString(<span class="number">1</span>, book);</span><br><span class="line">                        stmt.setString(<span class="number">2</span>, chapter);</span><br><span class="line">                        stmt.setString(<span class="number">3</span>, part);</span><br><span class="line">                        stmt.addBatch();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                stmt.executeBatch();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException | IOException e) &#123;</span><br><span class="line">                conn.rollback();</span><br><span class="line">                conn.setAutoCommit(<span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">            conn.commit();</span><br><span class="line">            conn.setAutoCommit(<span class="keyword">true</span>);</span><br><span class="line">            System.out.println(<span class="string">"导入完成！"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException | IOException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">"导入时发生错误！"</span>);</span><br><span class="line">            e.printStackTrace(System.err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><p>运行之前需要下载JDBC驱动（<span class="exturl" data-url="aHR0cHM6Ly93d3cub3JhY2xlLmNvbS90ZWNobmV0d29yay9kYXRhYmFzZS9hcHBsaWNhdGlvbi1kZXZlbG9wbWVudC9qZGJjL2Rvd25sb2Fkcy9pbmRleC5odG1s" title="https://www.oracle.com/technetwork/database/application-development/jdbc/downloads/index.html">Oracle<i class="fa fa-external-link"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9kZXYubXlzcWwuY29tL2Rvd25sb2Fkcy9jb25uZWN0b3Ivai84LjAuaHRtbA==" title="https://dev.mysql.com/downloads/connector/j/8.0.html">MySQL<i class="fa fa-external-link"></i></span>）。如果不使用Eclipse或IDEA等IDE，可以用以下命令编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac ImportUtils.java</span><br></pre></td></tr></table></figure><p>为了方便阅读，我对小说按照章节进行了分割，文件名格式类似5_1.txt。预处理完成后运行（备注：这里是Linux/macOS）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Oracle</span></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:ojdbc6.jar</span><br><span class="line"><span class="comment"># MySQL</span></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:mysql-connector-java-8.0.13.jar</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 1 5`; <span class="keyword">do</span></span><br><span class="line">    java ImportUtils 5 1 5_<span class="variable">$i</span>.txt</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="awk脚本（Linux服务器）"><a href="#awk脚本（Linux服务器）" class="headerlink" title="awk脚本（Linux服务器）"></a>awk脚本（Linux服务器）</h2><p>DBA们可能并没有在电脑上安装Java，不过没关系，我们也可以将小说上传到服务器上，通过下面的awk脚本生成SQL，然后通过sqlplus执行SQL，把将小说内容导入到数据库中：</p><p>gen_sql.awk：<br><div class="tabs" id="awk"><ul class="nav-tabs"><li class="tab active"><a href="#awk-1">Oracle</a></li><li class="tab"><a href="#awk-2">MySQL</a></li></ul><div class="tab-content"><div class="tab-pane active" id="awk-1"><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> &#123;</span><br><span class="line">    INSERT_SQL = <span class="string">"INSERT INTO OGGFORWARD.TBL_EROMANGA (ID, BOOK, CHAPTER, TEXT) VALUES (SEQ_TBL_EROMANGA.NEXTVAL, '@1', '@2', '@3');"</span>;</span><br><span class="line">    <span class="keyword">if</span> (!LINE_WIDTH) &#123;</span><br><span class="line">        LINE_WIDTH = <span class="number">70</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!BOOK) &#123;</span><br><span class="line">        <span class="keyword">exit</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    print <span class="string">"SET AUTOCOMMIT OFF;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 导入变量</span></span><br><span class="line">    gsub(<span class="regexp">/@1/</span>, BOOK, INSERT_SQL);</span><br><span class="line">    gsub(<span class="regexp">/@2/</span>, CHAPTER, INSERT_SQL);</span><br><span class="line"></span><br><span class="line">    <span class="comment"># awk会直接忽略空行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    gsub(<span class="regexp">/'/</span>, <span class="string">"''"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;length; i+=LINE_WIDTH) &#123;</span><br><span class="line">        part = substr(<span class="variable">$0</span>, i, LINE_WIDTH);</span><br><span class="line">        line = INSERT_SQL;</span><br><span class="line">        gsub(<span class="regexp">/@3/</span>, part, line);</span><br><span class="line">        print line;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> &#123;</span><br><span class="line">    print <span class="string">"COMMIT;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="awk-2"><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> &#123;</span><br><span class="line">    INSERT_SQL = <span class="string">"INSERT INTO oggforward.tbl_eromanga (book, chapter, text) VALUES ('@1', '@2', '@3');"</span>;</span><br><span class="line">    <span class="keyword">if</span> (!LINE_WIDTH) &#123;</span><br><span class="line">        LINE_WIDTH = <span class="number">70</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!BOOK) &#123;</span><br><span class="line">        <span class="keyword">exit</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    print <span class="string">"SET NAMES utf8;"</span>;</span><br><span class="line">    print <span class="string">"BEGIN;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 导入变量</span></span><br><span class="line">    gsub(<span class="regexp">/@1/</span>, BOOK, INSERT_SQL);</span><br><span class="line">    gsub(<span class="regexp">/@2/</span>, CHAPTER, INSERT_SQL);</span><br><span class="line"></span><br><span class="line">    <span class="comment"># awk会直接忽略空行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    gsub(<span class="regexp">/'/</span>, <span class="string">"''"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;length; i+=LINE_WIDTH) &#123;</span><br><span class="line">        part = substr(<span class="variable">$0</span>, i, LINE_WIDTH);</span><br><span class="line">        line = INSERT_SQL;</span><br><span class="line">        gsub(<span class="regexp">/@3/</span>, part, line);</span><br><span class="line">        print line;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span> &#123;</span><br><span class="line">    print <span class="string">"COMMIT;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div></p><div class="note warning"><p>在macOS系统下面，awk的length和substr无法正确识别中文；在Linux系统下面则需要正确设置LANG环境变量才能识别中文，例如在命令前面加<code>LANG=zh_CN.UTF-8</code>。</p></div><p>假如小说文件名是5_1.txt至5_5.txt，那么导入时可以：</p><div class="tabs" id="import"><ul class="nav-tabs"><li class="tab active"><a href="#import-1">Oracle</a></li><li class="tab"><a href="#import-2">MySQL</a></li></ul><div class="tab-content"><div class="tab-pane active" id="import-1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 1 5`; <span class="keyword">do</span></span><br><span class="line">    awk -v BOOK=5 -v CHAPTER=<span class="variable">$i</span> -f gen_sql.awk 5_<span class="variable">$i</span>.txt | sqlplus oggforward/eromanga</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="import-2"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 1 5`; <span class="keyword">do</span></span><br><span class="line">    awk -v BOOK=5 -v CHAPTER=<span class="variable">$i</span> -f gen_sql.awk 5_<span class="variable">$i</span>.txt | mysql -u oggforward -h 0.0.0.0 -peromanga</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></div></div></div><div class="note warning"><p>这里需要再次注意文件字符编码，如果txt编码、LANG、NLS_LANG（Oracle）与数据库（Oracle）/表（MySQL）编码四者不一致也会乱码！</p><p>假如txt文件是UTF-8，数据库是GBK，可以先用<code>iconv -f utf8 -t gbk -c 1.txt &gt; 1_gbk.txt</code>对文件转码，然后<code>export LANG=zh_CN.GBK</code>设置awk编码。</p><p>另外也可以不改编码，管道到iconv：<code>awk ... | iconv -f utf8 -t gbk -c | sqlplus oggforward/eromanga</code></p></div><h2 id="如果连数据库也是Windows服务器"><a href="#如果连数据库也是Windows服务器" class="headerlink" title="如果连数据库也是Windows服务器"></a>如果连数据库也是Windows服务器</h2><p>Windows系统自带VBScript，一样能生成SQL然后执行。不会写VBScript也没关系，把小说扔到Excel里面然后用公式拼接出SQL语句也行。</p><h1 id="开始阅读"><a href="#开始阅读" class="headerlink" title="开始阅读"></a>开始阅读</h1><p>用你平常用的数据库工具登录，然后<br><div class="tabs" id="query"><ul class="nav-tabs"><li class="tab active"><a href="#query-1">Oracle</a></li><li class="tab"><a href="#query-2">MySQL</a></li></ul><div class="tab-content"><div class="tab-pane active" id="query-1"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 阅读</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">ID</span>, BOOK, CHAPTER, <span class="built_in">TEXT</span>, IS_READ, ACCESS_TIME </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    OGGFORWARD.TBL_EROMANGA E</span><br><span class="line"><span class="keyword">WHERE</span> E.BOOK = <span class="string">'1'</span> <span class="keyword">AND</span> E.CHAPTER = <span class="string">'1'</span>    <span class="comment">-- 例如：第1卷第一章</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> E.ID;</span><br><span class="line"><span class="comment">-- 阅读未看过的，加个WHERE条件IS_READ='0'</span></span><br><span class="line"><span class="comment">-- 标记已看过的部分</span></span><br><span class="line"><span class="keyword">UPDATE</span> OGGFORWARD.TBL_EROMANGA <span class="keyword">SET</span> IS_READ=<span class="string">'1'</span>, ACCESS_TIME=<span class="keyword">SYSDATE</span> <span class="keyword">WHERE</span> <span class="keyword">ID</span>&lt;你所看到的<span class="keyword">ID</span> <span class="keyword">AND</span> IS_READ=<span class="string">'0'</span>;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="query-2"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 阅读</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">id</span>, book, chapter, <span class="built_in">text</span>, is_read, access_time </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    oggforward.tbl_eromanga e</span><br><span class="line"><span class="keyword">WHERE</span> e.book = <span class="string">'1'</span> <span class="keyword">AND</span> e.chapter = <span class="string">'1'</span>    <span class="comment">-- 例如：第1卷第一章</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> e.id;</span><br><span class="line"><span class="comment">-- 阅读未看过的，加个WHERE条件IS_READ='0'</span></span><br><span class="line"><span class="comment">-- 标记已看过的部分</span></span><br><span class="line"><span class="keyword">UPDATE</span> oggforward.tbl_eromanga <span class="keyword">SET</span> is_read=<span class="string">'1'</span>, access_time=<span class="keyword">sysdate</span>() <span class="keyword">WHERE</span> <span class="keyword">id</span>&lt;你所看到的<span class="keyword">ID</span> <span class="keyword">AND</span> is_read=<span class="string">'0'</span>;</span><br></pre></td></tr></table></figure></div></div></div></p><p>注意放一些有迷惑性的语句（相当于“老板键”），包装一下你的阅读器，例如：</p><div class="tabs" id="normalsql"><ul class="nav-tabs"><li class="tab active"><a href="#normalsql-1">Oracle</a></li></ul><div class="tab-content"><div class="tab-pane active" id="normalsql-1"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看锁表情况并生成解锁语句</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    b.owner,b.object_name,c.sid,c.serial#,a.locked_mode,c.username,c.osuser,c.machine,c.module,c.logon_time,</span><br><span class="line">    <span class="string">'ALTER SYSTEM KILL SESSION '''</span>||c.sid||<span class="string">','</span>||c.serial#||<span class="string">''';'</span> cmd,</span><br><span class="line">    s.sql_text</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    v$locked_object a,dba_objects b, v$<span class="keyword">session</span> c, v$<span class="keyword">sql</span> s</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    b.object_id = a.object_id <span class="keyword">AND</span> a.session_id = c.sid <span class="keyword">AND</span> s.address = c.PREV_SQL_ADDR <span class="keyword">AND</span> s.hash_value = c.PREV_HASH_VALUE</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> c.logon_time;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看连接数</span></span><br><span class="line"><span class="keyword">SELECT</span> machine, <span class="keyword">status</span>, <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">FROM</span> v$<span class="keyword">session</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> machine, <span class="keyword">status</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看表空间使用情况</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.tablespace_name,</span><br><span class="line">    <span class="keyword">round</span>(total_bytes / <span class="number">1048576</span>, <span class="number">2</span>) total_mb,</span><br><span class="line">    <span class="keyword">round</span>((total_bytes - free_bytes) / <span class="number">1048576</span>, <span class="number">2</span>) used_mb,</span><br><span class="line">    <span class="keyword">round</span>(free_bytes / <span class="number">1048576</span>, <span class="number">2</span>) free_mb,</span><br><span class="line">    <span class="keyword">round</span>((<span class="number">1</span> - free_bytes / total_bytes) * <span class="number">100</span>, <span class="number">2</span>) used_ratio</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    (<span class="keyword">SELECT</span> tablespace_name, <span class="keyword">sum</span>(<span class="keyword">bytes</span>) free_bytes <span class="keyword">FROM</span> dba_free_space <span class="keyword">GROUP</span> <span class="keyword">BY</span> tablespace_name) a,</span><br><span class="line">    (<span class="keyword">SELECT</span> tablespace_name, <span class="keyword">sum</span>(<span class="keyword">bytes</span>) total_bytes <span class="keyword">FROM</span> dba_data_files <span class="keyword">GROUP</span> <span class="keyword">BY</span> tablespace_name) b</span><br><span class="line"><span class="keyword">WHERE</span> a.tablespace_name = b.tablespace_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> a.tablespace_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看占资源的SQL</span></span><br><span class="line"><span class="comment">-- 最耗时的SQL</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v$sqlstats <span class="keyword">ORDER</span> <span class="keyword">BY</span> elapsed_time <span class="keyword">DESC</span>;</span><br><span class="line"><span class="comment">-- 执行次数最多的SQL</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v$sqlstats <span class="keyword">ORDER</span> <span class="keyword">BY</span> executions <span class="keyword">DESC</span>;</span><br><span class="line"><span class="comment">-- 读磁盘最多的SQL</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v$sqlstats <span class="keyword">ORDER</span> <span class="keyword">BY</span> disk_reads <span class="keyword">DESC</span>;</span><br><span class="line"><span class="comment">-- 耗CPU最多的SQL</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v$sqlstats <span class="keyword">ORDER</span> <span class="keyword">BY</span> buffer_gets <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure></div></div></div><p>如果在IDEA等环境操作数据库，可以再打开一些平日工作用的程序代码。</p><p><img src="/img/2019-01-11-oracle-novel/preview.png" alt="看不出什么问题"></p><p>嗯，看不出什么问题（如果不看<a href="/img/2019-01-11-oracle-novel/eromanga.jpg">插画</a>的话），而且领导来了也不怕，大大方方地继续执行附近SQL就行了——没准领导还会以为你热爱钻研数据库技术呢。</p><h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><p>如果公司网络管的不严，而且自己电脑或数据库服务器能访问互联网，那么也可以继续拓展，通过Oracle或MySQL刷新闻、贴吧或微博之类的东西。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上班时间看小说有很多种方式，例如直接拿手机看，在浏览器上面看，用小说阅读器看，拷到Word里面看，甚至拷到Eclipse里面看……然而，这几种方式看起来都比较显眼，就算放在Eclipse上面看起来也不太自然（方块字又多又密，而且没有语法高亮，一看就不像程序代码）。在此，本文针对软件开发和运维人员介绍一种可以大大方方在上班时间看小说而且不会引起怀疑的方法——在数据库客户端里面看小说。&lt;/p&gt;
    
    </summary>
    
      <category term="闲谈" scheme="https://plusnan.me/categories/%E9%97%B2%E8%B0%88/"/>
    
    
      <category term="Oracle" scheme="https://plusnan.me/tags/Oracle/"/>
    
      <category term="MySQL" scheme="https://plusnan.me/tags/MySQL/"/>
    
      <category term="Cheatsheet" scheme="https://plusnan.me/tags/Cheatsheet/"/>
    
  </entry>
  
  <entry>
    <title>Java代码审查（三）：关于编程习惯的要求</title>
    <link href="https://plusnan.me/2019/01/04/java-code-review-3/"/>
    <id>https://plusnan.me/2019/01/04/java-code-review-3/</id>
    <published>2019-01-03T16:00:00.000Z</published>
    <updated>2019-01-09T18:35:51.677Z</updated>
    
    <content type="html"><![CDATA[<p>这里是我个人的倡议，仅供参考。各项目应按照实际情况制定自己的操作规范，经常加强对新人的教育，以免把经文念得越来越歪。<br><a id="more"></a></p><h1 id="新来者"><a href="#新来者" class="headerlink" title="新来者"></a>新来者</h1><ul><li>主动了解项目有哪些开发规范。<ul><li>如果实际操作与开发规范已经不符，要敢于提出质疑，纠正错误操作或调整过时规范。</li></ul></li><li>仿写是快速学习的一种方法，但是，仿写时候要动脑子，不要完全照抄已有代码，更不要照搬垃圾代码。</li><li>除了完成任务，不要忘了界面美观、操作便利、性能高效、保证信息安全、代码规范清晰这类不会使自己涨工资但是能减少被诅咒次数的东西。</li><li>如果不能保质保量地完成任务，一定要尽早吱声。如果拖到最后也做不出来，或者做到最后挖的坑比正面贡献还多，后果好不了。</li><li>事后诸葛亮：不听取本文意见，最终结果可能是项目质量感人。</li></ul><h1 id="开发工作"><a href="#开发工作" class="headerlink" title="开发工作"></a>开发工作</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>新功能和数据库表结构的设计都要通过评审。</li><li>搞清楚业务场景和业务逻辑再动手。</li><li>把数据量估计好，以免产生正式环境运行过慢、页面展示爆炸等特效。</li></ul><h2 id="书写新代码"><a href="#书写新代码" class="headerlink" title="书写新代码"></a>书写新代码</h2><ul><li>避免直接copy-paste。就算抄也要自己写一遍，过一下脑子。</li><li>如果一段代码重复了两三遍甚至更多，那么应当改写成公共代码。<ul><li>接上条，造新轮子之前，查一下有没有可以拿来用的现成的东西。</li></ul></li><li>将Web（请求处理）、BO（业务逻辑）、DAO（数据持久）等层次与PO（持久对象）、VO（值对象）等领域区分好，例如不要在Web层或JSP页面写业务逻辑。</li><li>代码和页面风格都要规范统一。</li></ul><h2 id="修改既有代码"><a href="#修改既有代码" class="headerlink" title="修改既有代码"></a>修改既有代码</h2><ul><li>修改函数签名、函数实现、应用配置、接口签名等内容之前必须先检查引用情况。<ul><li>修改公共方法和公共配置之前应仔细评估影响并加强测试。如果不清楚影响，那么要先咨询老员工再修改。</li><li>设计和修改公共组件（包括公共函数、标签、模板、Filter等），除了正确实现功能，还必须更加关注运行效率、资源占用、线程安全性等问题。</li></ul></li><li>如果发现待修改的代码比较诡异，修改之前建议先问问老员工有没有什么历史原因或者坑。</li><li>即使是简单的修改也要进行测试，因为再有经验也有可能改出问题。</li><li>及时清理出于备份目的留下的注释，以免造成混淆。如果后续有可能恢复，那么应当用注释说清情况。</li></ul><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><ul><li>提交代码之前完成功能自测。</li><li>提交之前对代码进行一下美化，例如自动缩进、移除无用import等（需要事先统一标准）。</li><li>提交之前必须检查待提交的Diff（差异）：<ul><li>提交务必完整，不能出现编译错误，不能导致程序无法正常运行。</li><li>不能完整提交就不要提交。</li><li>不要有错别字、笔误和语病。</li><li>不要把本地调试代码（例如alert(val)、屏蔽校验规则、写死测试数据之类的）提交上去。</li></ul></li><li>提交时书写提交说明，例如实现了什么功能或解决了什么问题。</li><li>注意提交频率，按活动一次性提交齐全，不要长期不提交，也不要改一个文件就提交一下。</li></ul><h1 id="代码细节"><a href="#代码细节" class="headerlink" title="代码细节"></a>代码细节</h1><h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><ul><li>除了循环ijk那种一望而知的情况，要用有意义的英文名，而且不要用拼音简写，更不要拼音英语混写。</li><li>保持命名一致，例如不要前面还在用“state”表示“状态”，后面就变成了用“status”表示状态。如果不知道如何一致，那么就看代码规范以及别人怎么写的。</li><li>如果确实需要借用名称或借用字段，要把情况写清楚，以免造成混淆。</li></ul><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><ul><li>书写SQL要实地执行一下。</li><li>要估计投入到生产环境之后会产生多少数据，以免效率过低甚至系统瘫痪。</li><li>查询和关联时要留意是否一定能查到数据。不确定的话要与熟悉业务的人或DBA交流。</li><li>书写复杂SQL要看执行计划，估算执行效率，必要时与DBA交流，以便在数据库层面进行优化调整。<ul><li>如果顺便发现没有主键或索引，那么也要告诉DBA。</li></ul></li><li>尽量以绑定变量形式书写SQL而非直接拼接，以提高语句解析效率。</li><li>对于改造升级类的系统，注意要兼容历史数据。</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>在业务代码处简单地解释业务规则。</li><li>复杂逻辑、边界情况、HACK操作以及“装逼操作”要写注释说明。</li><li>需求变更、业务逻辑修改等情况务必在相关代码中写注释说明，而且要标出在什么时间、因什么原因而修改，以便事后追溯。<ul><li>接上条，如果预计以后还会发生变动，建议各关联代码都用唯一且相同的代码进行标记（例如CHANGE20190101），这样以后再改代码的时候容易搜索。</li></ul></li><li>TODO的事情写上TODO四个字母并进行跟踪，已经完成以及不是TODO的事情不要写TODO。</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>关于报错：给用户展示正常人类能看懂的文字，而且让用户和开发者都能知道大概是哪方面错误以及如何处理。</li><li>及时清理无效引用与变更。</li><li>及时维护文档。如果不能及时维护，建议强迫自己改完文档再编码。</li></ul><h1 id="本系列目录"><a href="#本系列目录" class="headerlink" title="本系列目录"></a>本系列目录</h1><ol><li><a href="/2019/01/02/java-code-review-1">代码审查问题</a></li><li><a href="/2019/01/03/java-code-review-2">应用安全问题</a></li><li><strong>关于编程习惯的要求</strong></li><li>使用Phabricator进行人工代码审查</li><li>使用FindBugs和SonarQube等工具进行扫描</li><li>……</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里是我个人的倡议，仅供参考。各项目应按照实际情况制定自己的操作规范，经常加强对新人的教育，以免把经文念得越来越歪。&lt;br&gt;
    
    </summary>
    
      <category term="经验" scheme="https://plusnan.me/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Java" scheme="https://plusnan.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代码审查（二）：应用安全问题</title>
    <link href="https://plusnan.me/2019/01/03/java-code-review-2/"/>
    <id>https://plusnan.me/2019/01/03/java-code-review-2/</id>
    <published>2019-01-02T16:00:00.000Z</published>
    <updated>2019-01-06T17:53:57.139Z</updated>
    
    <content type="html"><![CDATA[<p>由于安全问题经常被忽视与无视，因此有必要专门指出一些常见的安全隐患以及预防措施。不过Web安全问题已是老生常谈，网上资料也非常丰富，故本文仅仅点到为止，不再详细解释。</p><a id="more"></a><h1 id="总体原则"><a href="#总体原则" class="headerlink" title="总体原则"></a>总体原则</h1><ul><li>开发人员要了解各类攻击方式</li><li>绝不信任用户输入，开发时要假设用户的输入存在各种攻击</li></ul><h1 id="注入类"><a href="#注入类" class="headerlink" title="注入类"></a>注入类</h1><h2 id="跨站脚本攻击（XSS）"><a href="#跨站脚本攻击（XSS）" class="headerlink" title="跨站脚本攻击（XSS）"></a>跨站脚本攻击（XSS）</h2><ul><li>示例：在填写信息时，在正常内容中夹带<code>&lt;script&gt;alert(1);&lt;/script&gt;</code>。如展示信息时弹出一个对话框，上面写着“1”，那么说明注入成功。假如代码不是弹框而是后台偷偷执行一段恶意脚本……<ul><li>对策<ul><li>优雅的做法：如无特殊需要，页面上的动态输出均要对HTML字符进行转义。</li><li>简单粗暴的做法：控制用户输入，设置XSS相关敏感词清单，发现之后拦截或清理。</li></ul></li></ul></li></ul><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><ul><li><p>示例：假如用以下SQL进行登录信息校验</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidLogin</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">    String sql = <span class="string">"SELECT 1 FROM users WHERE username='"</span> + username + <span class="string">"' AND password='"</span> + password + <span class="string">"'"</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  那么登录时在密码中输入<code>&#39; or &#39;&#39;=&#39;</code>，SQL就会变成</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> username=<span class="string">'admin'</span> <span class="keyword">AND</span> <span class="keyword">password</span>=<span class="string">''</span> <span class="keyword">OR</span> <span class="string">''</span>=<span class="string">''</span></span><br></pre></td></tr></table></figure><p>  结果就会变成不知道密码也能直接进去了。</p><p>  另外，假如密码输入的是<code>&#39;; drop table users; --</code>……</p><ul><li>对策<ul><li>优雅的做法：一律避免直接拼SQL，只用PreparedStatement这种能防止注入的方式。</li><li>简单粗暴的做法：（1）控制用户输入，设置SQL注入相关敏感词清单，发现之后拦截或清理；（2）设置转义的公共函数，在拼接SQL时总是对来自用户的输入进行转义。</li></ul></li></ul></li></ul><h2 id="路径注入"><a href="#路径注入" class="headerlink" title="路径注入"></a>路径注入</h2><ul><li>示例：用户输入文件名，即可查询<code>/opt/data/info</code>目录中的文件。如果程序控制不严，而且用户输入了<code>../../../etc/passwd</code>，那么就能看到系统有哪些用户了。<ul><li>对策：过滤敏感词，例如“./”、“../”等。</li></ul></li></ul><h2 id="恶意文件执行"><a href="#恶意文件执行" class="headerlink" title="恶意文件执行"></a>恶意文件执行</h2><ul><li>示例：应用提供了文件上传功能，上传1.jpg之后可通过<code>http://www.xxx.com/files/1.jpg</code>网址访问。如果系统未进行控制，那么上传精心设计的a.jsp并访问<code>http://www.xxx.com/files/a.jsp</code>就可以控制服务器了。<ul><li>对策<ul><li>检查待上传文件的文件类型。</li><li>对服务器进行设置，或者对目录加以处理，防止服务器执行存放目录下的文件。</li><li>或者不要直接用路径访问文件，而是使用一个Web请求间接访问文件，例如<code>http://www.xxx.com/getfile.jsp?id=1056</code>。</li></ul></li></ul></li></ul><h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><ul><li>示例：登录自己的A网站，然后在与其无关的B网站中对A网站的一个功能发POST请求，如A系统未做控制，那么表单会提交成功。假如B系统是背着用户偷偷发的……<ul><li>对策<ul><li>优雅的做法：每个form都配上随机产生的token，提交表单时后台校验token是否有效。</li><li>简单粗暴的做法：校验HTTP请求中的Referer，白名单之外的域名一律拦截。</li></ul></li></ul></li></ul><h1 id="越权访问"><a href="#越权访问" class="headerlink" title="越权访问"></a>越权访问</h1><h2 id="直接对象引用"><a href="#直接对象引用" class="headerlink" title="直接对象引用"></a>直接对象引用</h2><ul><li>示例：自己的工作单是<code>http://www.xxx.com/business/view.jsp?id=1024</code>，将1024改成其他数字就看到了其他人的工作单。<ul><li>对策：加入访问控制检测，只允许查询自己的工作单。例如校验工作单的办理者是否为本人，或者在SQL上面加入权限相关条件，使不具备访问权限的数据查不出来。</li></ul></li></ul><h2 id="认证不全"><a href="#认证不全" class="headerlink" title="认证不全"></a>认证不全</h2><ul><li>示例：张三有敏感数据查看权限，而李四没有。李四发现张三查看敏感数据的网址是<code>http://www.xxx.com/business/viewsecret.jsp</code>，之后将其记录下来，并使用自己账号访问这个地址，结果也看到了敏感数据。<ul><li>对策：实现一个用户访问控制框架，对于每个URL，先校验用户有没有访问权限，如果没有则拦截。</li></ul></li></ul><h2 id="缺少后台校验"><a href="#缺少后台校验" class="headerlink" title="缺少后台校验"></a>缺少后台校验</h2><ul><li>示例：在业务申请页面上选择A，系统提示“不符合条件，无法保存”。通过浏览器的检查元素功能选中A，保存成功。<ul><li>对策：无论前台是否有校验，后台务必进行校验。</li><li>注意校验可以大致分为两类，一类是有效性校验，例如某个字段不能为空，另一类是业务层面的校验。建议后者设计统一的校验框架。</li></ul></li></ul><h1 id="信息泄漏"><a href="#信息泄漏" class="headerlink" title="信息泄漏"></a>信息泄漏</h1><ul><li>示例1：登录系统，用户名错误时系统提示“用户名错误”，密码错误时系统提示“密码错误”。这样攻击者看到“密码错误”时便知道用户名是正确的。<ul><li>对策1：模糊地提示“用户名或密码错误”，并且加入验证码，或者多次失败后锁定账号，以防暴力猜测密码。</li></ul></li><li>示例2：在错误信息中出现SQL语句。这样攻击者一旦攻进数据库便会更加容易知道该查哪些表的哪些数据。<ul><li>对策2：防范措施：检查报错内容，并且检查有没有关闭类似“Debug模式”的设置，不要暴露程序源代码或SQL这样的敏感信息。</li></ul></li><li>示例3：直接展示用户身份证号、手机号等敏感数据。<ul><li>对策3：如无必要展示则不展示，或者进行脱敏处理（138****1234、320101******121234）。</li></ul></li></ul><h1 id="拒绝服务"><a href="#拒绝服务" class="headerlink" title="拒绝服务"></a>拒绝服务</h1><ul><li>示例1：查询功能未控制提交频率，也没有验证码，那么用户可以频繁查询，甚至使用机器人暴力地刷结果。<ul><li>对策1：对于耗时的操作，控制用户提交的频率，或者引入验证码。</li></ul></li><li>示例2：分页功能每页最多显示100条，如果程序未在后台进行限制，那么可以通过构造请求使每页查出10000条甚至更多，从而影响系统性能。<ul><li>对策2：构造SQL时估计数据规模，并控制数据上限，防止查出过多记录。</li></ul></li><li>示例3：查询功能要求用户必须填A、B、C中至少一个查询条件，如后台未做控制，那么用户可以构造请求，A、B、C三个条件都不填，从而拖累系统。<ul><li>示例3：考虑到“什么条件都没有”情况下应当如何防止SQL查询结果爆炸。</li></ul></li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li>示例1：用明文/用MD5保存密码。一旦数据库信息泄漏，密码就直接暴露了。<ul><li>对策1：密码必须加密之后再存到数据库中，而且不能直接MD5或者MD5里面套MD5。</li></ul></li><li>示例2：提交表单时未控制页面按钮与用户操作，使得用户可以容易地多次提交表单。<ul><li>对策2：提交表单时将提交按钮变灰，增加动画反馈，使用户不会直接重复点按钮；提交完成之后重定向到编辑页面，而不是直接停留在POST提交的链接，以免用户因按F5而重复提交。</li></ul></li><li>示例3：未使用HTTPS请求。<ul><li>注意：HTTP请求内容可以很容易地监听和篡改，但HTTPS几乎不能。</li></ul></li><li>示例4：正式环境忘记删除调试文件（例如.git、.svn、.DS_Store）</li></ul><h1 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h1><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cua2FuY2xvdWQuY24vd2l6YXJkZm9yY2VsL293YXNwLWNoZWF0LXNoZWV0LXpoLzEyMTk0Mw==" title="https://www.kancloud.cn/wizardforcel/owasp-cheat-sheet-zh/121943">WEB应用安全测试备忘单<i class="fa fa-external-link"></i></span></li></ul><h1 id="本系列目录"><a href="#本系列目录" class="headerlink" title="本系列目录"></a>本系列目录</h1><ol><li><a href="/2019/01/02/java-code-review-1">代码审查问题</a></li><li><strong>应用安全问题</strong></li><li><a href="/2019/01/04/java-code-review-3">关于编程习惯的要求</a></li><li>使用Phabricator进行人工代码审查</li><li>使用FindBugs和SonarQube等工具进行扫描</li><li>……</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于安全问题经常被忽视与无视，因此有必要专门指出一些常见的安全隐患以及预防措施。不过Web安全问题已是老生常谈，网上资料也非常丰富，故本文仅仅点到为止，不再详细解释。&lt;/p&gt;
    
    </summary>
    
      <category term="经验" scheme="https://plusnan.me/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Java" scheme="https://plusnan.me/tags/Java/"/>
    
      <category term="安全" scheme="https://plusnan.me/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="注入" scheme="https://plusnan.me/tags/%E6%B3%A8%E5%85%A5/"/>
    
      <category term="越权" scheme="https://plusnan.me/tags/%E8%B6%8A%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>Java代码审查（一）：代码审查问题</title>
    <link href="https://plusnan.me/2019/01/02/java-code-review-1/"/>
    <id>https://plusnan.me/2019/01/02/java-code-review-1/</id>
    <published>2019-01-01T16:00:00.000Z</published>
    <updated>2019-01-14T12:17:17.910Z</updated>
    
    <content type="html"><![CDATA[<p>当然，由于不同项目用的东西大概会很不一样，所以本文仅供参考。<br><a id="more"></a></p><h1 id="格式与美观问题"><a href="#格式与美观问题" class="headerlink" title="格式与美观问题"></a>格式与美观问题</h1><ul><li>命名不规范：例如类名小写字母开头、函数名大写字母开头、拼音英语混写等。由于关于命名规范的资料很多，这里不再列出。</li><li>不加空白/空白太多：例如<ul><li>没有缩进、缩进混乱、Tab空格混用</li><li>if、while、for或运算符之类的没有空格</li><li>一行代码后面留好几行空白</li><li>不同业务逻辑之间没有空行或“华丽的分割线”<br>以上虽然没有错误，但是不好看。</li></ul></li><li>一行内容太长</li><li>代码字符编码或换行符不一致：建议新项目统一用UTF-8字符编码和Unix换行符。</li><li>变量、方法顺序混乱</li><li><p>表达式太复杂：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误：?:优先级低，导致整个判断条件的逻辑不正确。应该将不同情况用括号包上，分行列举并用注释说明业务规则</span></span><br><span class="line"><span class="keyword">if</span> (year &gt;= nowYear - <span class="number">5</span> &amp;&amp; hasApplied || year &gt;= nowYear - <span class="number">10</span> &amp;&amp; year &lt; nowYear - <span class="number">5</span> &amp;&amp; !hasApplied || year &gt;= hasApplied ? nowYear - <span class="number">20</span> : nowYear - <span class="number">15</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改成</span></span><br><span class="line"><span class="keyword">boolean</span> isValidApply = ((year &gt;= nowYear - <span class="number">5</span>) &amp;&amp; hasApplied) ||         <span class="comment">// 业务规则1</span></span><br><span class="line">    ((year &gt;= nowYear - <span class="number">10</span>) &amp;&amp; (year &lt; nowYear - <span class="number">5</span>) &amp;&amp; !hasApplied) ||  <span class="comment">// 业务规则2</span></span><br><span class="line">    (year &gt;= (hasApplied ? (nowYear - <span class="number">20</span>) : (nowYear - <span class="number">15</span>)));           <span class="comment">// 业务规则3</span></span><br><span class="line"><span class="keyword">if</span> (isValidApply) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用魔法值（未定义的常量）：建议改用常数或枚举。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">"4"</span>.equals(vo.getStatusFlag())) &#123;   <span class="comment">// 4是什么状态？</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h1><ul><li><p>使用==和!=比较字符串：在Java中==和!=比较的不是字符串内容，应该用equals方法。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误</span></span><br><span class="line"><span class="keyword">if</span> (str != <span class="string">""</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改之后</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="string">""</span>.equals(str)) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>空指针风险：字符串对象和常量比较时，应当把常量放前面，例如</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误</span></span><br><span class="line"><span class="keyword">if</span> (str.equals(<span class="string">"A"</span>)) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确：str为null时返回false，不会报错，也不需要另外去判断</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">"A"</span>.equals(str)) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接上条：判断是否为空串时，未判断是否为null。建议改用StringUtils.isEmpty或StringUtils.isNotEmpty。  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 应该是 str != null &amp;&amp; !"".equals(str)</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="string">""</span>.equals(str)) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>使用equals比较StringBuffer、StringBuilder或Date的值：如果equals前后一个是String，另一个是StringBuffer等对象，那么返回结果一定是false：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder sql = ...;</span><br><span class="line">Date date = ...;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 错误：前后类型不一致，结果肯定是false</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">""</span>.equals(sql)) &#123; ... &#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"2019-01-01"</span>.equals(date)) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改之后</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">""</span>.equals(sql.toString())) &#123; ... &#125; <span class="comment">// 或者 if (sql.length() == 0) &#123; ... &#125;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">"2019-01-01"</span>.equals(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"YYYY-MM-DD"</span>).format(date))) &#123; ... &#125;</span><br><span class="line"><span class="comment">// 或者 if ("2019-01-01".equals(DateFormatUtils.ISO_DATE_FORMAT.format(date))) &#123; ... &#125;</span></span><br></pre></td></tr></table></figure></li><li><p>在for、while循环里面用+=拼接字符串：使用+=拼接字符串的效率比较低，运行数百次就会和StringBuilder产生明显差别，应该用StringBuilder或StringBuffer（如果多线程的话）拼接字符串。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误</span></span><br><span class="line">String output = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> (...) &#123;</span><br><span class="line">    ...</span><br><span class="line">    output += id + <span class="string">": "</span> + line + <span class="string">"\n"</span>;      <span class="comment">// 直接拼接字符串效率较低</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改之后</span></span><br><span class="line">StringBuilder output = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span> (...) &#123;</span><br><span class="line">    ...</span><br><span class="line">    output.append(id).append(<span class="string">": "</span>).append(line).append(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>split之后用固定下标取值：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String[] arr = str.split(<span class="string">","</span>);</span><br><span class="line">String val = arr[<span class="number">3</span>];    <span class="comment">// 错误：如果str中分隔符后面没有内容（例如a,,b,c,,），val的位置将不是3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以修改成</span></span><br><span class="line">String[] arr = str.split(<span class="string">","</span>, -<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 或者不再依赖位置</span></span><br></pre></td></tr></table></figure></li><li><p>split时未注意分隔符前后有空格：例如原始数据是<code>1, 2,3 , 4</code>。建议取值之后trim。</p></li><li>使用split、trim之前未判断是否为null：常见于从数据库获取值之后立即操作。  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String remark = rs.getString(<span class="string">"REMARK"</span>).trim();      <span class="comment">// 错误：未判断REMARK是否为null</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="对象访问"><a href="#对象访问" class="headerlink" title="对象访问"></a>对象访问</h1><ul><li><p>在循环里面初始化对象：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (ApplyFormPO applyForm: applyList) &#123;</span><br><span class="line">    Date now = <span class="keyword">new</span> Date();      <span class="comment">// 浪费资源</span></span><br><span class="line">    ...</span><br><span class="line">    applyForm.setOperating_time(now);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改成</span></span><br><span class="line">Date now = <span class="keyword">new</span> Date();</span><br><span class="line"><span class="keyword">for</span> (ApplyFormPO applyForm: applyList) &#123;</span><br><span class="line">    ...</span><br><span class="line">    applyForm.setOperating_time(now);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  需要注意的是，并不是所有在循环里初始化对象的代码都有问题，例如下面代码就不能向上面那样改：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;ApplyFormPO&gt; applyList = <span class="keyword">new</span> ArrayList&lt;ApplyFormPO&gt;();</span><br><span class="line"><span class="keyword">for</span> (...) &#123;</span><br><span class="line">    ApplyFormPO applyForm = <span class="keyword">new</span> ApplyFormPO();      <span class="comment">// 这个不能放到for外面，因List里面保存的是对象引用</span></span><br><span class="line">    ...</span><br><span class="line">    applyList.add(applyForm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>空指针：在DAO、List、Map等地方取值时未判断是否为null，例如</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误：未判断list的元素个数</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="string">""</span>.equals(list.get(<span class="number">0</span>).getStatus()) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误：未判断中间变量A和B是否为null</span></span><br><span class="line"><span class="keyword">if</span> (obj.getA().getB().isC()) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>包装类比较==或!=：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Integer i1 = ...;</span><br><span class="line">Integer i2 = ...;</span><br><span class="line"><span class="comment">// 错误：下面比较的不是i1和i2的值</span></span><br><span class="line"><span class="keyword">if</span> (i1 == i2) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>顺便提一下，float、double即使不是包装类也不能用==或!=比较，因为存在精度问题。</li></ul></li><li><p>在for循环里添加或删除集合中的元素：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Item obj: itemList) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"d"</span>.equals(obj.getFlag()) &#123;</span><br><span class="line">        itemList.remove(obj);       <span class="comment">// 错误：会破坏for循环</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改方法：使用Iterator操作删除，或者再创建一个List，将删除操作反映到新List中</span></span><br><span class="line">List&lt;Item&gt; newItemList = <span class="keyword">new</span> ArrayList&lt;Item&gt;();</span><br><span class="line"><span class="keyword">for</span> (Item obj: itemList) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">"d"</span>.equals(obj.getFlag()) &#123;</span><br><span class="line">        newItemList.add(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (Item obj: newItemList) &#123; <span class="comment">// 后续操作使用newItemList，或者以 itemList = newItemList; 替换</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>static SimpleDateFormat：SimpleDateFormat不是线程安全的，其实例不应定义成静态变量。建议不再使用SimpleDateFormat，而是改用DateFormatUtils。</p></li><li><p>工具类未使用static定义，或者static方法仍然在new对象之后调用：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 错误：应改成static</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (str == <span class="keyword">null</span>) || (str.length() == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">StringUtils su = <span class="keyword">new</span> StringUtils();     <span class="comment">// 改成static之后无需再实例化，以免浪费资源</span></span><br><span class="line"><span class="keyword">if</span> (su.isEmpty(str)) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><ul><li>将异常用作流程控制：该用if-else进行判断的地方不要用try-catch，因为效率低以及语义不同。</li><li>在for或while中try-catch：同样消耗资源，建议将try块挪到循环外面。</li><li><p>捕获/抛出NullPointerException或IndexOutOfBoundsException等异常：空指针、索引越界等问题应当使用if判断来避免，而且此类问题有可能是业务层面问题，不应靠异常机制处理。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">String result;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"A"</span>.equals(poList.get(<span class="number">0</span>).getFlag())) &#123;</span><br><span class="line">        result = <span class="string">"Y"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result = <span class="string">"N"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (NullPointerException e) &#123;          <span class="comment">// 错误：应当避免使程序产生此类异常</span></span><br><span class="line">    result = <span class="string">"E"</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e) &#123;     <span class="comment">// 错误：应当避免使程序产生此类异常</span></span><br><span class="line">    result = <span class="string">"E"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改成</span></span><br><span class="line"><span class="keyword">if</span> (poList == <span class="keyword">null</span> || poList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">    result = <span class="string">"E"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"A"</span>.equals(poList.get(<span class="number">0</span>).getFlag())) &#123;</span><br><span class="line">        result = <span class="string">"Y"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result = <span class="string">"N"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打印日志：</p><ul><li>发生异常却未向用户反馈，仍然提示“成功”：实际上已经出错了，应当提示出来。如果确定对用户没有影响，可以忽略，那么应当在注释中明确指出来。</li><li><p>报错信息缺少用户能看懂的语言：应当先提示用户能看得懂的内容，给出大概的错误原因和处理方法。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    setMessage(<span class="string">"保存成功！"</span>, MessageLevel.SUCCESS);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    setMessage(e.getMessage(), MessageLevel.ERROR); <span class="comment">// 错误：用户看不懂Exception的内容</span></span><br><span class="line">    logger.debug(<span class="string">"保存过程中发生内部错误"</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>日志级别与实际情况不一致：例如用error输出调试内容、用debug输出错误信息。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    setMessage(<span class="string">"保存成功！"</span>, MessageLevel.SUCCESS);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    setMessage(<span class="string">"保存过程中发生内部错误："</span> + e.getMessage() + <span class="string">"！"</span>, MessageLevel.ERROR);</span><br><span class="line">    logger.debug(<span class="string">"保存过程中发生内部错误"</span>, e);      <span class="comment">// 错误：应该是error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  如果系统在上线一段时间之后已经比较稳定，建议提高日志级别，以节约服务器空间和I/O资源消耗。</p></li><li>屏幕提示和日志记录不一致：  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    setMessage(<span class="string">"保存成功！"</span>, MessageLevel.SUCCESS);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    setMessage(<span class="string">"保存过程中发生内部错误："</span> + e.getMessage() + <span class="string">"！"</span>, MessageLevel.ERROR);</span><br><span class="line">    logger.error(<span class="string">"查询工作单信息出错"</span>, e);      <span class="comment">// 错误：与屏幕提示不一致，找日志时会产生困扰</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>捕获异常但未做任何处理：一旦出现异常，开发人员将无法进行诊断。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();        <span class="comment">// 应向用户反馈（最外层）或向上抛（不是最外层的话）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重复捕获异常：在业务层捕获异常，使得业务调用者无法得知异常，也无法向用户提供反馈。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 业务逻辑</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessBO</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplyPO <span class="title">getApplyInfo</span><span class="params">(String applyId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ...     <span class="comment">// 业务逻辑</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            logger.error(<span class="string">"查询时发生异常"</span>, e);</span><br><span class="line">            <span class="comment">// 错误：业务层的异常未往上抛，这样即使发生异常用户也无法收到反馈</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 业务调用者</span></span><br><span class="line"><span class="meta">@Controller</span>()</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessController</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/apply/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getApplyInfo</span><span class="params">(...)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ApplyPO applypo = BusinessBO.getApplyInfo(id);</span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 虽然使用Exception不会产生编译错误，但是这里根本捕捉不到异常</span></span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在Web请求层（SpringMVC的Controller、Struts的Action）或WebService服务上面抛出异常：服务调用者无法捕获服务抛出的异常，顶多能够得知服务返回了500状态码（然而这样是不对的）。应该由双方约定错误信息格式，将抛出异常改成返回错误码。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebService</span>(endpointInterface = <span class="string">"com.company.BusinessService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessService</span> <span class="keyword">implements</span> <span class="title">IBusinessService</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 错误示例 - Service不能抛出异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doJob</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正确示例 - 返回错误码，使调用者得知接口通了，但是结果异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String result = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">            result = <span class="string">"&#123;\"result\": \"SUCCESS\", \"info\": \"操作成功\"&#125;"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            ...</span><br><span class="line">            result = <span class="string">"&#123;\"result\": \"E01\", \"info\": \"操作失败，数据库异常\"&#125;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><ul><li><p>未关闭资源：未关闭ResultSet、PrepareStatement、Connection或者各种（不一定是数据库的）流。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = ...;</span><br><span class="line">PreparedStatement stmt = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 错误：未关闭资源</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    stmt = conn.prepareStatement(<span class="string">"..."</span>);</span><br><span class="line">    rs = stmt.executeQuery();</span><br><span class="line">    <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应在finally中释放资源</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    stmt = ...</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123; rs.close(); &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stmt != <span class="keyword">null</span>) &#123; stmt.close(); &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123; conn.close(); &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在循环中操作数据库：建立连接、执行SQL和关闭连接需要时间，虽然一次执行时间可能不长，但是在循环中累积会很耗时。因此应当减少数据库操作次数，一次性查询好，或者使用批处理一次性执行修改。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (String id: idList) &#123;</span><br><span class="line">    <span class="comment">// 从数据库获取对象</span></span><br><span class="line">    ItemPO item = getItem(id);   <span class="comment">// 错误：在for循环中操作数据库</span></span><br><span class="line">    <span class="comment">// 进行修改</span></span><br><span class="line">    item.setColA(...);</span><br><span class="line">    item.setColB(...);</span><br><span class="line">    <span class="comment">// 将修改保存到数据库中</span></span><br><span class="line">    updateItem(item);     <span class="comment">// 错误：在for循环中操作数据库</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改成（假定itemList还有其他用途，要不然直接UPDATE就行了）</span></span><br><span class="line"><span class="comment">// 一次性将idList里的数据都取出来</span></span><br><span class="line">List&lt;ItemPO&gt; itemList = getItemList(idList);</span><br><span class="line"><span class="comment">// 将itemList装到Map中以便查询</span></span><br><span class="line">Map&lt;String, ItemPO&gt; itemMap = <span class="keyword">new</span> HashMap&lt;String, ItemPO&gt;();</span><br><span class="line"><span class="keyword">for</span> (ItemPO item: itemList) &#123;</span><br><span class="line">    itemMap.put(item.getId(), item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PreparedStatement stmt = connection.prepareStatement(<span class="string">"UPDATE BUSINESS SET AAA=?, BBB=? WHERE ID=?"</span>);</span><br><span class="line"><span class="keyword">for</span> (String id: idList) &#123;</span><br><span class="line">    <span class="comment">// 从Map获取对象</span></span><br><span class="line">    ItemPO item = itemMap.get(id);</span><br><span class="line">    <span class="comment">// 进行修改</span></span><br><span class="line">    stmt.setString(<span class="number">1</span>, ...);</span><br><span class="line">    stmt.setString(<span class="number">2</span>, ...);</span><br><span class="line">    stmt.setString(<span class="number">3</span>, item.getId());</span><br><span class="line">    <span class="comment">// 加入批处理</span></span><br><span class="line">    stmt.addBatch();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行批处理</span></span><br><span class="line">stmt.executeBatch();</span><br></pre></td></tr></table></figure></li><li><p>getString之后未判断是否为null，或者从DAO取值后未判断是否为null：从可空字段取值之后，返回的可能是null。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String remark = rs.getString(<span class="string">"REMARK"</span>).trim();      <span class="comment">// 错误：未判断是否为null</span></span><br></pre></td></tr></table></figure></li><li><p>事务</p><ul><li>该有事务的地方没加事务：对于一系列数据库修改操作而言，如果这些操作应当“共进退”，即要么全部执行完，要么出错之后能够全部恢复，那么应当加入事务控制。</li><li><p>发生异常时未回滚事务：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">    ...</span><br><span class="line">    conn.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    <span class="comment">// 错误：此处应有conn.rollback();</span></span><br><span class="line">    ...</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重复提交/回滚事务：已经commit/rollback之后又执行了commit/rollback。如果在开启事务之后调用了一些函数，但是未注意到函数里面也有事务控制，那么结果可能会出错。</p></li></ul></li><li><p>该加锁的地方没加锁：例如从流水号表取下一流水号</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getNextSerial</span><span class="params">(String businessType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        stmt = conn.prepareStatement(<span class="string">"SELECT NEXT_NO FROM T_SERIAL WHERE ..."</span>);</span><br><span class="line">        stmt.setString(<span class="number">1</span>, ...);</span><br><span class="line">        rs = stmt.executeQuery();</span><br><span class="line">        <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">            <span class="keyword">int</span> next_no = rs.getInt(<span class="string">"NEXT_NO"</span>);</span><br><span class="line">            result = businessType + <span class="string">"-"</span> + next_no;</span><br><span class="line">            <span class="comment">// 将流水号表中的记录加1</span></span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 将初始值置为1，并向流水号表插入记录</span></span><br><span class="line">            ...     </span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  假如NEXT_NO为5，那么在并发条件下各用户获取到的可能都是5，从而产生冲突，因此需要通过加锁进行控制（例如synchronized）。另外注意这种代码在读取数据时就发生了冲突，所以光加事务控制是不起作用的。</p></li></ul><h1 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h1><ul><li><p>SQL语法错误：例如引号不配对、括号不配对、数据类型不匹配，或者拼接的SQL缺空格、有多余AND和多余逗号等。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder sql = <span class="keyword">new</span> StringBuilder(<span class="string">"SELECT ID,NAME FROM TAB WHERE"</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotEmpty(cond1)) &#123;</span><br><span class="line">    <span class="comment">// 两个错误：一个是缺空格，另一个是在WHERE后面直接拼接AND了</span></span><br><span class="line">    sql.append(<span class="string">"AND cond1='"</span>).append(escapeSQL(cond1)).append(<span class="string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotEmpty(cond2)) &#123;</span><br><span class="line">    sql.append(<span class="string">" AND cond2 IN ("</span>);</span><br><span class="line">    String[] arr = cond2.split(<span class="string">","</span>);</span><br><span class="line">    <span class="keyword">for</span> (String s: arr) &#123;</span><br><span class="line">        sql.append(<span class="string">"'"</span>).append(escapeSQL(s)).append(<span class="string">"',"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 错误：未处理最后一个多余的逗号</span></span><br><span class="line">    sql.append(<span class="string">")"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用SELECT *：应当写清字段名而非简单粗暴的*。</p></li><li>直接拼接SQL：未对用户输入进行处理，会导致SQL注入，应该用PreparedStatement或者使用转义函数对用户输入内容转义。<ul><li>接上条，要避免重复转义。</li></ul></li><li><p>对可空字段使用&lt;&gt;或NOT IN：应注意单独判断NULL值。</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 假设FLAG是可空字段，那么以下都是有问题的</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>, <span class="keyword">NAME</span> <span class="keyword">FROM</span> TAB <span class="keyword">WHERE</span> FLAG&lt;&gt;<span class="string">'1'</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>, <span class="keyword">NAME</span> <span class="keyword">FROM</span> TAB <span class="keyword">WHERE</span> FLAG <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">'1'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="comment">-- 应修改成（下面只考虑NULL问题，不考虑效率问题）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>, <span class="keyword">NAME</span> <span class="keyword">FROM</span> TAB <span class="keyword">WHERE</span> FLAG&lt;&gt;<span class="string">'1'</span> <span class="keyword">OR</span> FLAG <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>, <span class="keyword">NAME</span> <span class="keyword">FROM</span> TAB <span class="keyword">WHERE</span> FLAG <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">'1'</span>, <span class="string">'2'</span>) <span class="keyword">OR</span> FLAG <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure></li><li><p>子查询返回多条记录：</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>, <span class="keyword">NAME</span> <span class="keyword">FROM</span> TAB <span class="keyword">WHERE</span> BUSINO=(<span class="keyword">SELECT</span> BUSINO <span class="keyword">FROM</span> APPL <span class="keyword">WHERE</span> ...);</span><br><span class="line"><span class="comment">-- 如果查询APPL会返回多条记录，那么会出错，因此需要调整子查询条件，保证至多返回一条记录，例如（Oracle）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>, <span class="keyword">NAME</span> <span class="keyword">FROM</span> TAB <span class="keyword">WHERE</span> BUSINO=(<span class="keyword">SELECT</span> BUSINO <span class="keyword">FROM</span> APPL <span class="keyword">WHERE</span> ... <span class="keyword">AND</span> <span class="keyword">ROWNUM</span>=<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li><p>用==或&lt;&gt;判断NULL：应使用IS NULL或IS NOT NULL进行判断。</p></li><li>IN后面没有值，或者取值超过了1000个。</li><li><p>参数校验不完整：假如HUGE_TABLE是张很大的表，对于下面代码而言，只要构造不含任何条件的请求，那么就可以把系统搞瘫痪。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绕过前台校验，不传任何条件，使程序直接查全表</span></span><br><span class="line">StringBuilder sql = <span class="keyword">new</span> StringBuilder(<span class="string">"SELECT NAME,DESCRIPTION FROM HUGE_TABLE WHERE 1=1"</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotEmpty(cond1)) &#123;</span><br><span class="line">    sql.append(<span class="string">" AND COND1='"</span>).append(escapeSQL(cond1)).append(<span class="string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotEmpty(cond2)) &#123;</span><br><span class="line">    sql.append(<span class="string">" AND COND2='"</span>).append(escapeSQL(cond2)).append(<span class="string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotEmpty(cond3)) &#123;</span><br><span class="line">    sql.append(<span class="string">" AND COND3='"</span>).append(escapeSQL(cond3)).append(<span class="string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line">PreparedStatement stmt = conn.prepareStatement(sql.toString());</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>  另外两个例子：</p><ul><li>如果分页程序未对每页最多记录数进行限制，那么用户可以让每页显示10000条记录，从而影响系统运行。</li><li>如果参数作为UPDATE或DELETE的条件来使用，那么绕过校验会产生灾难性后果。</li></ul></li></ul><h1 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h1><h2 id="HTML-JSP"><a href="#HTML-JSP" class="headerlink" title="HTML/JSP"></a>HTML/JSP</h2><ul><li>使用过时的标签和属性，例如&lt;font&gt;或者&lt;span color=”red”&gt;。</li><li>HTML标签不匹配。</li><li>修改表格标题内容，未修改待展示的数据，或者未修改带有colspan的单元格。</li><li>不经转义直接输出动态内容：容易导致XSS注入。</li></ul><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><ul><li>使用document.getElementById等函数之后未判断是否为null。</li><li>动态添加控件后未绑定事件。<ul><li>接上条，动态添加控件后，选择器有误，导致既有控件又绑了一遍事件。</li></ul></li><li>进行AJAX操作，未处理请求超时、请求错误和返回错误码的情况。</li><li>后台使用GB2312，前台AJAX内容含有中文，但未进行转码处理。</li><li>点击提交、删除等具有危险性的按钮，系统直接执行操作，不给出任何确认提示。</li><li>进行保存、提交等耗时操作时没有等待提示，也未将控制按钮变灰：这样容易使用户以为操作不成功而重复点击。</li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li>线程安全问题：例如使用静态HashMap实例进行缓存。</li><li>没有设置连接超时：一旦数据库或接口卡死，而用户还在正常使用系统，那么程序会消耗越来越多的资源，最终导致响应慢甚至崩溃。</li></ul><h1 id="本系列目录"><a href="#本系列目录" class="headerlink" title="本系列目录"></a>本系列目录</h1><ol><li><strong>代码审查问题</strong></li><li><a href="/2019/01/03/java-code-review-2">应用安全问题</a></li><li><a href="/2019/01/04/java-code-review-3">关于编程习惯的要求</a></li><li>使用Phabricator进行人工代码审查</li><li>使用FindBugs和SonarQube等工具进行扫描</li><li>……</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当然，由于不同项目用的东西大概会很不一样，所以本文仅供参考。&lt;br&gt;
    
    </summary>
    
      <category term="经验" scheme="https://plusnan.me/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Java" scheme="https://plusnan.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java代码审查：目录</title>
    <link href="https://plusnan.me/2019/01/01/java-code-review-0/"/>
    <id>https://plusnan.me/2019/01/01/java-code-review-0/</id>
    <published>2018-12-31T16:00:00.000Z</published>
    <updated>2019-01-05T16:55:50.813Z</updated>
    
    <content type="html"><![CDATA[<p>在讨论代码审查问题之前，需要指出不遵守代码规范的后果：</p><ol><li>被骂“坑爹”</li><li>被同事暗中诅咒</li><li>跳槽之后被新同事暗中诅咒</li><li>跳槽之后被原来公司的同事暗中诅咒</li></ol><p>为了避免诅咒的命运，本系列文章整理了一些代码审查问题，并以个人角度对编程习惯提出一些要求和建议。对于项目而言，一方面要加强审查，另一方面要加强对项目成员的教育，防止问题再次产生。</p><a id="more"></a><p><img src="/img/2019-01-01-java-code-review-0/kuroneko.jpg" alt="诅咒"></p><h1 id="本系列目录"><a href="#本系列目录" class="headerlink" title="本系列目录"></a>本系列目录</h1><ol><li><a href="/2019/01/02/java-code-review-1">代码审查问题</a></li><li><a href="/2019/01/03/java-code-review-2">应用安全问题</a>：由于安全问题经常被忽视和无视，因此有必要专门指出安全隐患以及预防措施。</li><li><a href="/2019/01/04/java-code-review-3">关于编程习惯的要求</a>：这里主要是我个人关于操作方面的倡议，感觉合理的话可以参考。</li><li>使用Phabricator进行人工代码审查</li><li>使用FindBugs和SonarQube等工具进行扫描</li><li>……</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在讨论代码审查问题之前，需要指出不遵守代码规范的后果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;被骂“坑爹”&lt;/li&gt;
&lt;li&gt;被同事暗中诅咒&lt;/li&gt;
&lt;li&gt;跳槽之后被新同事暗中诅咒&lt;/li&gt;
&lt;li&gt;跳槽之后被原来公司的同事暗中诅咒&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为了避免诅咒的命运，本系列文章整理了一些代码审查问题，并以个人角度对编程习惯提出一些要求和建议。对于项目而言，一方面要加强审查，另一方面要加强对项目成员的教育，防止问题再次产生。&lt;/p&gt;
    
    </summary>
    
      <category term="经验" scheme="https://plusnan.me/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Java" scheme="https://plusnan.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>升级发版检查表</title>
    <link href="https://plusnan.me/2018/12/20/deploy-checklist/"/>
    <id>https://plusnan.me/2018/12/20/deploy-checklist/</id>
    <published>2018-12-19T16:00:00.000Z</published>
    <updated>2019-01-06T17:51:43.257Z</updated>
    
    <content type="html"><![CDATA[<p>系统升级和发版是一个动静很大的操作，必须充分做好实施计划和应急预案。本文是我们项目日常升级的检查表，供大家参考。</p><a id="more"></a><div class="note info"><p>我们这里做的是项目，不是产品。产品的操作流程应该有所不同。但无论是项目还是产品，强烈建议以检查表的形式保证操作没有疏漏。</p></div><ul><li>完成项目内准备工作<ul><li>完成所有功能测试</li><li>完成代码审查，严重缺陷全部关闭</li><li>制定对外的发版说明，准备推送内容，更新“更新历史”内容</li><li>封版、打基线</li><li>应用打包</li><li>检查打包内容，确认已按生产环境配置，而且不包含.svn、.git、.DS_Store这样的敏感文件</li><li>完成部门内部申请流程</li></ul></li><li>完成与甲方的沟通工作（需提前一周实施）<ul><li>决定向甲方报告的内容，提交相关申请材料，跟踪甲方审核进度</li><li>审核通过后申请堡垒机操作权限</li></ul></li><li>提前在系统进行升级公告，使用户做好准备（我们设计了相关功能，只要在数据库插入一条记录就能展示公告）</li><li>实施升级<ul><li>检查内存、硬盘使用情况，如果硬盘剩余空间不足则清理或压缩旧备份与旧日志</li><li>备份原程序</li><li>暂停Web应用防火墙（WAF）防护</li><li>检查应用运行情况，如有卡死等问题先重启，以免更新操作失败</li><li>将程序替换为新版本并进行Web服务器的更新</li><li>执行升级初始化SQL</li><li>如有数据库表结构调整，并且涉及OGG传输（Oracle），则需要同时处理OGG的源端和汇聚端，并确保OGG状态正常</li></ul></li><li>升级后验证<ul><li>观察应用是否正常启动</li><li>进行功能验证，发现问题及时处理。若在堡垒机权限结束前无法修复，那么则进行回滚（包括程序包和SQL），放弃升级</li><li>全部操作完成后，恢复WAF防护</li></ul></li><li>结束<ul><li>通知甲方升级顺利完成</li><li>向用户推送新版本的发版说明</li><li>向客服和运维人员通知升级内容</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;系统升级和发版是一个动静很大的操作，必须充分做好实施计划和应急预案。本文是我们项目日常升级的检查表，供大家参考。&lt;/p&gt;
    
    </summary>
    
      <category term="经验" scheme="https://plusnan.me/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Web" scheme="https://plusnan.me/tags/Web/"/>
    
      <category term="项目实施" scheme="https://plusnan.me/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%96%BD/"/>
    
  </entry>
  
  <entry>
    <title>在2018版MacBook Pro安装Windows 10，以及分区扩容</title>
    <link href="https://plusnan.me/2018/12/14/install-windows-on-macbook-pro-2018/"/>
    <id>https://plusnan.me/2018/12/14/install-windows-on-macbook-pro-2018/</id>
    <published>2018-12-13T16:00:00.000Z</published>
    <updated>2019-01-04T04:42:38.322Z</updated>
    
    <content type="html"><![CDATA[<p>几个月前在苹果商店购买了新版的MacBook Pro，为了玩个游戏，准备安装Windows系统，然而发现通过系统的Boot Camp（启动转换助理）进行安装根本无法成功。经过一番折腾，得出一个结论：只能手工制作安装盘，以手工方式安装Windows 10。<br><a id="more"></a></p><h1 id="坑的要点"><a href="#坑的要点" class="headerlink" title="坑的要点"></a>坑的要点</h1><ul><li>用Boot Camp创建启动盘时会提示“‘启动转换’安装失败”、“拷贝Windows安装文件时出错”、“‘启动转换助理’正在移除其创建的分区，请稍候”，因为Windows 10安装盘通常大于4GB，FAT32格式分区装不下，所以失败。</li><li>即使找到了小于4GB的安装盘，也不要继续用Boot Camp来进行安装。虽然重启之后能进入到Windows安装程序中，也能正常地下一步下一步，但是只要到再努力一小下就会成功的时刻，安装程序就会蹦出“Windows无法更新计算机的启动配置，安装无法继续”，然后系统开始自动回滚，结果失败。</li></ul><p>这说明Boot Camp本身可能有bug，我们不能使用Boot Camp进行安装。</p><h1 id="避免踩坑的操作步骤"><a href="#避免踩坑的操作步骤" class="headerlink" title="避免踩坑的操作步骤"></a>避免踩坑的操作步骤</h1><ol><li>做好以下准备：<ul><li>U盘：注意文件系统要FAT32的</li><li>USB键盘、USB鼠标（至少要预备个鼠标）</li><li>USB转接线</li><li>下载Windows 10 64位安装盘（可以去<span class="exturl" data-url="aHR0cDovL21zZG4uaXRlbGx5b3UuY24=" title="http://msdn.itellyou.cn">msdn.itellyou.cn<i class="fa fa-external-link"></i></span>下载），将安装盘映像当作压缩包解压到U盘上——因为MacBook也是EFI启动，所以解压就足够了，不需要特意找刻录软件去刻录</li></ul></li><li>按住Command+R开机，进入Recovery模式，完成以下操作：<ul><li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS96aC1jbi9ndWlkZS9kaXNrLXV0aWxpdHkvZHNrdXRsMTQwMjcvbWFj" title="https://support.apple.com/zh-cn/guide/disk-utility/dskutl14027/mac">在磁盘工具给Windows分区、格式化<i class="fa fa-external-link"></i></span>。注意两点，第一是记住磁盘容量以免在安装时错误地格式化，第二是尽量把容量计算好，因为调整容量非常麻烦，而且很可能要删分区。</li><li><span class="exturl" data-url="aHR0cHM6Ly9zdXBwb3J0LmFwcGxlLmNvbS96aC1jbi9IVDIwODMzMA==" title="https://support.apple.com/zh-cn/HT208330">关闭安全启动<i class="fa fa-external-link"></i></span></li></ul></li><li>回到macOS，启动Boot Camp，点击“操作”中的“下载Windows支持软件”。下载完成后相关文件会放到家目录中，把它复制到U盘根目录中。这一步不要漏掉，否则后面安装时找不到硬盘。</li><li>插上U盘，重启电脑，启动时按住Option键，从U盘启动。</li><li>进入Windows安装程序，把事先预备好的键盘和鼠标接上，如果能操作，那么就可以按正常步骤安装Windows了。若在选择分区时提示没有硬盘或分区，可以点击“加载驱动程序”按钮，找到事先在macOS系统里面下载的支持软件，安装SSD驱动，使Windows安装程序能够发现分区。</li><li>安装成功后，进入Windows系统，找到U盘里的支持软件，运行安装程序。安装成功后重启。</li></ol><p>以这种方式进行安装，除了有点麻烦以及不能在macOS的Boot Camp界面进行管理（即删除Windows）以外，其他基本上没什么区别。</p><h1 id="调整分区容量"><a href="#调整分区容量" class="headerlink" title="调整分区容量"></a>调整分区容量</h1><p>一旦Windows系统用起来了，调整容量将是极其麻烦的事情。如果非扩容不可，建议先备份数据，然后删掉Windows分区，全部重来。</p><p>但是，如果Mac分区剩余空间比Windows系统盘大，那么还可以以一种麻烦的方式完成扩容：将Windows系统盘备份到映像，删除Windows盘并重新分区，然后恢复备份，修正分区表。如果操作成功，那么就不需要重装系统和各软件，也不需要再调系统设置了。</p><div class="note danger"><p>操作有风险！如果不熟悉装机以及Linux/Unix操作，请不要继续，以免造成系统损坏或数据丢失！</p></div><div class="note info"><p>建议在操作时使各分区容量不相同，而且进行每一步破坏性操作之前确认目标分区容量，以避免误操作。</p></div><p>按以下步骤操作：</p><ol><li>准备工作：<ul><li>Windows安装U盘，其中已经预备好Boot Camp的“Windows支持软件”。</li><li>转接线</li><li>USB键盘和鼠标</li></ul></li><li>按住Command+R开机，进入Recovery模式。</li><li>进入磁盘工具，确认Windows安装盘的位置（例如/dev/disk0s2）以及Mac系统盘的名称（例如Macintosh HD）。如果还是拿不准的话，可以在终端里用“diskutil info /dev/disk0s2”这种命令来确认。</li><li><p>退出磁盘工具，进入终端。假如Mac系统盘叫做Macintosh HD，Windows系统盘是/dev/disk0s2，那么需要输入以下命令进行备份：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &quot;/Volumes/Macintosh HD&quot;</span><br><span class="line">dd if=/dev/disk0s2 of=backup.img bs=1m</span><br></pre></td></tr></table></figure></li><li><p>完成后重新进入磁盘工具，删除Windows分区，重新调整分区，不需要格式化。</p></li><li>重启，从U盘启动Windows安装程序，接上鼠标，在Windows安装程序界面上进行格式化，因为Windows比我们清楚要把多少空间划出来用作系统保留分区。</li><li>回到Recovery模式，确认新分区的位置是disk几s几（例如disk0s4）。</li><li><p>重新进入终端，恢复映像：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &quot;/Volumes/Macintosh HD&quot;</span><br><span class="line">dd if=backup.img of=/dev/disk0s4 bs=1m</span><br></pre></td></tr></table></figure></li><li><p>这时候Windows应该可以重新进入了，但是dd并非那种专业Windows分区备份还原软件，所以Windows分区的容量和剩余空间还是错的，需要修正。再次用Windows安装盘启动，接上键盘和鼠标，这次按Shift+F10进入命令提示符，然后输入diskpart，进入分区工具。</p></li><li><p>在diskpart里输入以下命令（注意命令中的“0”和“4”要根据实际情况填写）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list disk</span><br><span class="line">sel disk 0</span><br><span class="line">list volume</span><br><span class="line">sel volume 4</span><br><span class="line">extend</span><br></pre></td></tr></table></figure></li><li><p>检查两个系统能否正常启动。如果没问题就可以删掉苹果系统里的/backup.img了。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;几个月前在苹果商店购买了新版的MacBook Pro，为了玩个游戏，准备安装Windows系统，然而发现通过系统的Boot Camp（启动转换助理）进行安装根本无法成功。经过一番折腾，得出一个结论：只能手工制作安装盘，以手工方式安装Windows 10。&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="https://plusnan.me/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Mac" scheme="https://plusnan.me/tags/Mac/"/>
    
      <category term="Boot Camp" scheme="https://plusnan.me/tags/Boot-Camp/"/>
    
  </entry>
  
  <entry>
    <title>从Eclipse切换到IDEA（一）：切换操作</title>
    <link href="https://plusnan.me/2018/12/13/switch-to-idea-1/"/>
    <id>https://plusnan.me/2018/12/13/switch-to-idea-1/</id>
    <published>2018-12-12T16:00:00.000Z</published>
    <updated>2019-01-28T15:55:05.376Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍IDEA的操作方法。为了避免出现复杂问题，本文假设项目已经事先配置好，而且配置文件加到了版本控制中，其他人只要下载代码就可以直接用IDEA打开。<br><a id="more"></a></p><h1 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h1><p>下面只讲Windows的操作方法（尽管截图是macOS）。对于Linux或苹果用户而言，我觉得既然能使用这两种系统，就说明不太需要这种详细教程吧。</p><h2 id="安装IDEA"><a href="#安装IDEA" class="headerlink" title="安装IDEA"></a>安装IDEA</h2><p>IDEA可以从<span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9pZGVhL2Rvd25sb2FkLw==" title="https://www.jetbrains.com/idea/download/">官网<i class="fa fa-external-link"></i></span>下载，下载完成之后只要下一步下一步地操作就行。如果没钱买正版，请从<span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9pZGVhL2Rvd25sb2FkL3ByZXZpb3VzLmh0bWw=" title="https://www.jetbrains.com/idea/download/previous.html">这里<i class="fa fa-external-link"></i></span>找个稍微旧一点的版本，因为太新的版本可能没有破解工具或激活码。</p><p>安装结束后，如果没给JetBrains公司掏过钱，那么还需要从网上搜一下激活工具进行激活。</p><h2 id="安装SVN客户端"><a href="#安装SVN客户端" class="headerlink" title="安装SVN客户端"></a>安装SVN客户端</h2><p>SVN客户端推荐使用<span class="exturl" data-url="aHR0cHM6Ly90b3J0b2lzZXN2bi5uZXQvZG93bmxvYWRzLmh0bWw=" title="https://tortoisesvn.net/downloads.html">TortoiseSVN<i class="fa fa-external-link"></i></span>，因为和系统整合得比较好。安装时注意把“Command Line Tool”也安装上，否则后面IDEA和SVN配置会比较麻烦。</p><h1 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h1><p>下面假设项目代码库内已经有统一配置，后续会专门解释如何从头开始配置。</p><p>第一次打开项目时，系统需要花一段时间去建立索引，而第一次启动时系统也要花时间去编译和复制文件，但是这两项工作完成以后响应就比较快了。</p><p>在开始工作之前，需要检查和调整系统与项目的设置，例如SVN、JDK和Tomcat的路径。如果项目使用GBK等编码，还需要检查字符编码设置：</p><h2 id="SVN路径"><a href="#SVN路径" class="headerlink" title="SVN路径"></a>SVN路径</h2><p>点击File下面的Settings菜单，进入系统设置界面，选择“Version Control”下面的“Subversion”，在右侧设置中进行SVN路径的设置。找到SVN的安装目录，然后去里面找bin和svn.exe。如果没有发现svn.exe，说明你在安装TortoiseSVN时未安装命令行工具，需要重新安装。</p><p><img src="/img/2018-12-01-switch-to-idea-1/svnconfig.png" alt="SVN设置"></p><h2 id="JDK路径"><a href="#JDK路径" class="headerlink" title="JDK路径"></a>JDK路径</h2><p>点击File下面的Project Structure菜单，在弹出的对话框中选择左面的“Project”，可以看到类似下面的图：</p><p><img src="/img/2018-12-01-switch-to-idea-1/structure.png" alt="Project Structure"></p><p>图中Project SDK为空，所以需要添加项目所使用的JDK，而且Project language level选择项目所用的JDK版本。下面Project compiler output则是项目编译之后文件的存放位置，只要别提交到SVN上面，放在哪里其实都无所谓，不过一定要设置，否则无法启动。</p><h2 id="Tomcat路径"><a href="#Tomcat路径" class="headerlink" title="Tomcat路径"></a>Tomcat路径</h2><p>点击Run下面的Edit Configuration菜单，进入启动设置界面，如下图所示：</p><p><img src="/img/2018-12-01-switch-to-idea-1/tomcat-1.png" alt="缺少Tomcat"></p><p>点击Tomcat右边的Configure按钮，选择Tomcat安装路径：</p><p><img src="/img/2018-12-01-switch-to-idea-1/tomcat-2.png" alt="Tomcat设置"></p><p>如果路径正确，IDEA会给出Tomcat的版本。</p><p>若有自定义的context.xml并在其中指定了数据源，那么还要在Tomcat的lib目录中加入相应的数据库驱动，例如<span class="exturl" data-url="aHR0cHM6Ly93d3cub3JhY2xlLmNvbS90ZWNobmV0d29yay9hcHBzLXRlY2gvamRiYy0xMTIwMTAtMDkwNzY5Lmh0bWw=" title="https://www.oracle.com/technetwork/apps-tech/jdbc-112010-090769.html">ojdbc6.jar<i class="fa fa-external-link"></i></span>。</p><h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><p>默认字符编码是UTF-8。如果项目使用GB2312、GBK、GB18030这种编码，需要在系统设置“Editor”里的“File Encodings”设置默认编码。</p><h1 id="日常工作"><a href="#日常工作" class="headerlink" title="日常工作"></a>日常工作</h1><h2 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h2><p>默认情况下IDEA会自动保存文件修改，所以在IDEA里面不需要按Ctrl+S，也找不到保存按钮。如果不希望自动保存的话，可以在系统设置里面把它关掉。</p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>快捷键可以从菜单上面查看，下面列举几个默认而且最常用的按键设置：</p><table><thead><tr><th>功能</th><th>Eclipse按键</th><th>IDEA按键</th></tr></thead><tbody><tr><td>全局搜索字符串</td><td>Ctrl+H</td><td>Ctrl+Shift+F</td></tr><tr><td>全局替换字符串</td><td></td><td>Ctrl+Shift+R</td></tr><tr><td>快速修复（设置Getter和Setter、设置import等）</td><td>Ctrl+1</td><td>Alt+Enter</td></tr><tr><td>清理多余import</td><td>Ctrl+Shift+O</td><td>Ctrl+Alt+O</td></tr><tr><td>根据文件名找文件</td><td>Ctrl+Shift+R</td><td>按两下Shift</td></tr><tr><td>查看变量定义/函数使用情况</td><td>Ctrl+点击</td><td>Ctrl+点击</td></tr><tr><td>查看实现</td><td>Ctrl+点击，或者在函数上面按住Ctrl，在弹出菜单中选择“Open Implementation”</td><td>Ctrl+Alt+点击</td></tr><tr><td>格式化</td><td>Ctrl+Shift+F</td><td>Ctrl+Alt+L</td></tr><tr><td>单步执行，碰到函数就进到函数内部</td><td>F5</td><td>F7</td></tr><tr><td>单步执行，碰到函数直接返回结果</td><td>F6</td><td>F8</td></tr><tr><td>运行到当前函数的return部分</td><td>F7</td><td>Shift+F8</td></tr><tr><td>暂停之后继续运行程序</td><td>F8</td><td>F9</td></tr></tbody></table><p>如果习惯了Eclipse的按键，也可以将快捷键调成Eclipse模式。具体方法是找到系统设置中的“Keymap”，然后在右面的设置中选择“Eclipse”方案，这样各功能快捷键就和Eclipse一致了。</p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>在第一次调试时，建议检查一下启动配置是否符合自己需要。</p><p><img src="/img/2018-12-01-switch-to-idea-1/debug-1.png" alt="启动配置"></p><p>和Eclipse一样，如果想使用断点调试等功能，需要用虫子按钮而非普通的启动按钮来启动应用。点击启动之后，IDEA会进行编译并生成Web相关文件（见上图下侧Before launch部分，实际上IDEA之所以做这两件事是因为你在启动设置里面设置了Build和Build artifacts这两步操作），准备完成之后便会自动启动Tomcat。</p><p>另外也可以直接启动某一个类。启动之前那个类需要有一个静态的main函数，而且相关的配置文件要放对地方（例如src下面）。</p><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><p>版本控制通常在IDEA的Version Control窗口中进行。如果未发现这个窗口，可点击“View”菜单下面“Tool Buttons”，然后检查窗口下面的工具栏按钮。</p><p>除了在Version Control窗口以外，也可以对着文件或代码点鼠标右键，在弹出的版本管理相关菜单上面进行操作。</p><h3 id="Changelist"><a href="#Changelist" class="headerlink" title="Changelist"></a>Changelist</h3><p>IDEA的Version Control窗口可以很直观地列出你所进行的修改。如果发现修改未同步到列表中，可以点击左面的刷新按钮刷新一下（如果是新增文件，需要检查一下有没有将其加入到版本控制中）。</p><p>代码修改会以“Changelist”的形式组织。举个例子，假如修改了10个文件，有4个文件是为了处理问题A，有3个文件是为了处理问题B，而剩下3个文件是临时修改，不打算提交，这样可以建立三个Changelist（右击然后点击New changelist菜单），将三组文件分别拖拽到三个Changelist中，这样检查和提交的时候可以按Changelist分组进行。</p><p><img src="/img/2018-12-01-switch-to-idea-1/changelist-1.png" alt="Changelist可以直观地列出你的代码改动，并根据实际需要分组管理。如果未及时刷新状态，可点击左面的刷新按钮。"></p><h3 id="提交代码与回退"><a href="#提交代码与回退" class="headerlink" title="提交代码与回退"></a>提交代码与回退</h3><p>当准备进行提交时，只要在Version Control窗口对着Changelist或待提交文件（按Ctrl键多选）点右键，选择Commit，就会看到提交代码的窗口。</p><p>相反地，如果需要撤销更改，选择Revert菜单即可。</p><p><img src="/img/2018-12-01-switch-to-idea-1/changelist-2.png" alt="检查待提交文件列表和内容，输入摘要，点击Commit提交。"></p><div class="note info"><h4 id="针对新开发者的提醒"><a href="#针对新开发者的提醒" class="headerlink" title="针对新开发者的提醒"></a>针对新开发者的提醒</h4><p>以下内容转载自<span class="exturl" data-url="aHR0cHM6Ly9wcm9ncmFtLXRoaW5rLmJsb2dzcG90LmNvbS8yMDA5LzAyLzYuaHRtbA==" title="https://program-think.blogspot.com/2009/02/6.html">编程随想的博客<i class="fa fa-external-link"></i></span>：</p><p>据俺多年的观察，发觉 RCS（备注：版本管理软件）主要有如下几种误用的情况：</p><p>◇不正确的提交频度<br>　　有很多新手不习惯使用 RCS，很少进行代码的提交。有些人甚至到项目快结束时还没有提交过一行代码。结果导致整个 RCS 形同虚设。<br>　　还有一些人则走向另一个极端，频繁提交代码。有些人每改完一个文件就提交一次，还有些人甚至把修改一半，尚【不能】编译通过的代码也提交到 RCS。<br>　　俺个人认为，正确的提交频度应该分两种情况：在编写功能代码时，每完成一个功能点，并且自己经过了自测之后，提交一次；在调试的时候，每修复一个 bug，提交一次。这样能够保证提交到 RCS 的代码都是【能编译通过】的（详见<span class="exturl" data-url="aHR0cHM6Ly9wcm9ncmFtLXRoaW5rLmJsb2dzcG90LmNvbS8yMDA5LzAyL2RhaWx5LWJ1aWxkLTAtb3ZlcnZpZXcuaHRtbA==" title="https://program-think.blogspot.com/2009/02/daily-build-0-overview.html">每日构建系列<i class="fa fa-external-link"></i></span>），并且业务逻辑上也是相对完整的（对于每日构建后的测试很重要）。</p><p>◇提交时不写注释<br>　　很多人提交代码时不写注释，将来再想到版本历史里面找代码就犹如大海捞针般困难。<br>　　比如在俺经手的代码中，有些源代码文件历时3年，提交次数上百次，如果提交时不写注释，日后根本没法找。</p><p>◇不做代码基线（Baseline）、不做代码分支（Branch）<br>　　在正规的开发团队，每当有一个版本发布（Release）并交付给用户使用时，都需要在 RCS 中制作一个基线，以便于进行相应的 bug 跟踪和补丁制作。因此，诸如【做基线】之类的事情，属于整个团队的集体行为，需要由 Team Leader 牵头来搞。<br>　　假如一个开发团队从来不做代码基线或者代码分支，仅仅是把 RCS 当成一个源文件的备份工具来用，那至少说明这个团队的 Team Leader 在软件工程管理方面非常失败。</p></div><h3 id="查看文件提交历史"><a href="#查看文件提交历史" class="headerlink" title="查看文件提交历史"></a>查看文件提交历史</h3><p>对着文件点击右键，选择“Subversion”里面的“Show History”，即可在下面的Version Control窗口看到文件的提交历史。对着版本点击右键，选择“Show Diff”，即可看到某个版本是哪个人进行了哪些修改。</p><p>除SVN提交历史外，也可以查看文件的本地编辑历史。假如不慎错误地修改了某些内容，又不方便直接回退文件，可对着文件点右键，找到“Local History”，查看本地的历史记录以便恢复。</p><h3 id="查看代码库版本变更记录"><a href="#查看代码库版本变更记录" class="headerlink" title="查看代码库版本变更记录"></a>查看代码库版本变更记录</h3><p>Version Control第一个页签是你的待提交修改，第二个页签就是其他人已经提交的修改。如果没有看到提交记录，点击刷新按钮即可。</p><p>在变更记录窗口中，你可以选择提交记录，查看某一次提交涉及的修改内容。如果需要多版本审查，可以按Ctrl多选，右侧变更记录会将多条提交合并在一起。</p><!--## 数据库操作IDEA Ultimate版内置了DataGrip插件。--><h1 id="参见"><a href="#参见" class="headerlink" title="参见"></a>参见</h1><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9oZWxwL2lkZWEvbWlncmF0aW5nLWZyb20tZWNsaXBzZS10by1pbnRlbGxpai1pZGVhLmh0bWw=" title="https://www.jetbrains.com/help/idea/migrating-from-eclipse-to-intellij-idea.html">Migrating From Eclipse to IntelliJ IDEA<i class="fa fa-external-link"></i></span></li></ul><h1 id="本系列目录"><a href="#本系列目录" class="headerlink" title="本系列目录"></a>本系列目录</h1><ul><li><a href="/2018/12/12/switch-to-idea-0/">为什么进行切换</a></li><li><strong>切换的基本操作</strong></li><li><a href="/2019/01/27/switch-to-idea-2">古典Web项目在IDEA的Project Structure</a></li><li>Maven和Gradle项目在IDEA的Project Structure（待撰）</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍IDEA的操作方法。为了避免出现复杂问题，本文假设项目已经事先配置好，而且配置文件加到了版本控制中，其他人只要下载代码就可以直接用IDEA打开。&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="https://plusnan.me/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="IDEA" scheme="https://plusnan.me/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>从Eclipse切换到IDEA</title>
    <link href="https://plusnan.me/2018/12/12/switch-to-idea-0/"/>
    <id>https://plusnan.me/2018/12/12/switch-to-idea-0/</id>
    <published>2018-12-11T16:00:00.000Z</published>
    <updated>2019-01-26T17:41:47.856Z</updated>
    
    <content type="html"><![CDATA[<p>我们项目组之前一直使用Eclipse进行开发。对于我们项目而言，由于Eclipse存在现实的问题，我便开始研究IDEA的用法，并且试着将工作切换到IDEA上面，之后逐步地在项目组内推广使用IntelliJ IDEA。本系列文章面向Eclipse使用者，讲述IDEA的一些基本操作，以便平稳地进行切换。<br><a id="more"></a></p><h1 id="本系列内容"><a href="#本系列内容" class="headerlink" title="本系列内容"></a>本系列内容</h1><ul><li><strong>为什么进行切换</strong></li><li><a href="/2018/12/13/switch-to-idea-1/">切换的基本操作</a></li><li><a href="/2019/01/27/switch-to-idea-2">古典Web项目在IDEA的Project Structure</a></li><li>Maven和Gradle项目在IDEA的Project Structure（待撰）</li></ul><h1 id="切换到IDEA的理由"><a href="#切换到IDEA的理由" class="headerlink" title="切换到IDEA的理由"></a>切换到IDEA的理由</h1><p>下面是我向同事推荐使用IDEA（商业版）的一些理由：</p><ol><li>公司版本管理软件从ClearCase切换到了SVN，这意味着开发工作不再受ClearCase拖累，开发工具也可以随意换成更好用的了。</li><li>公司电脑配置不高，而且项目文件非常多，Eclipse用起来很卡。虽然IDEA资源消耗比较高，但是用起来比Eclipse顺畅得多（备注：对于内存只有4GB的电脑，要么加条，要么换旧版IDEA，否则会很糟糕）。</li><li>IDEA的搜索比Eclipse快得多，按全项目搜索的话，Eclipse要等把所有文件都过一遍，而IDEA可以一下子搜出来。</li><li>IDEA的SVN支持非常好，可以很方便地检查自己修改的代码、查询同事修改、对比文件版本，虽然TortoiseSVN和Eclipse也有类似功能，但是IDEA用起来更舒服。</li></ol><p>以下也是IDEA的长处，不过有些是个人体验，或者未作为推销的内容向同事介绍：</p><ol><li>IDEA的工作空间对版本控制友好，只要我把项目配置好，加到版本库中，其他人就可以直接用IDEA打开项目，等IDEA把文件索引完，然后再配一下JDK和Tomcat路径就能投入开发了。Eclipse的话每次全新checkout都要从头开始配置，而且我们项目组有时也会出现因工作安排变动或电脑难用而重新搭环境甚至重装系统的情况。</li><li>IDEA集成了数据库插件，代码提示比其他数据库软件好一些。另外修改数据时PL/SQL Developer需要附上FOR UPDATE，Toad需要用EDIT语句，SQL Developer需要自己写UPDATE语句，而IDEA可以直接在查询结果上面改。</li><li>IDEA对代码风格方面的提示和警告比Eclipse丰富，例如IDEA可以检测出哪些代码是一模一样的，或者哪些类与函数根本没有人使用。</li><li>IDEA自带反编译工具，可以方便地反编译代码，以分析一些jar包的原理。</li></ol><p>当然，Eclipse的用户和插件也不少，对于爱搞配置的人来说应该也比较好用。</p><h1 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h1><p>Eclipse和IDEA的界面与操作方法有些区别。概念上的重大差异主要是“Project Structure”，即项目文件结构的管理，不过如果有人把项目配置好并提交版本控制之后，其他成员反倒不太需要关注这些东西，因此我会另外写一篇文章进行叙述。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们项目组之前一直使用Eclipse进行开发。对于我们项目而言，由于Eclipse存在现实的问题，我便开始研究IDEA的用法，并且试着将工作切换到IDEA上面，之后逐步地在项目组内推广使用IntelliJ IDEA。本系列文章面向Eclipse使用者，讲述IDEA的一些基本操作，以便平稳地进行切换。&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="https://plusnan.me/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="IDEA" scheme="https://plusnan.me/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>Weblogic踩坑记录</title>
    <link href="https://plusnan.me/2018/11/02/weblogic-caution/"/>
    <id>https://plusnan.me/2018/11/02/weblogic-caution/</id>
    <published>2018-11-01T16:00:00.000Z</published>
    <updated>2019-01-06T18:02:43.288Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录我在部署Weblogic时遇到的各种坑。其中JDK为1.6，Weblogic版本11g。<br><a id="more"></a></p><style>#post-content table {    word-break: break-all;}code {    word-break: break-all;}</style><h1 id="开发阶段"><a href="#开发阶段" class="headerlink" title="开发阶段"></a>开发阶段</h1><h2 id="准备测试区"><a href="#准备测试区" class="headerlink" title="准备测试区"></a>准备测试区</h2><p>务必准备一个和生产环境架构接近的测试环境，而且开发环境、测试环境和生产环境的JDK与中间件版本应该保持一致，如果条件不够，至少测试环境和生产环境要一致。开发时用某个版本JDK和Tomcat，部署到生产环境时用另一个版本的JDK和Weblogic，这样很容易遭遇意外。</p><p>举一些例子，以下几个就属于Tomcat上面测不出来，挪到Weblogic上面就可能会暴露出来的错误，好在下表这些错误通过修改Weblogic服务器启动参数就能在一定程度上解决了：</p><div class="table-container"><table><thead><tr><th>场景</th><th>错误信息</th><th>启动参数</th></tr></thead><tbody><tr><td>生成图片</td><td>java.awt.HeadlessException</td><td>-Djava.awt.headless=true</td></tr><tr><td>访问HTTPS网站</td><td>javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: No trusted certificate found exception</td><td>-DUseSunHttpHandler=true</td></tr><tr><td>Apache CXF提供WebService服务</td><td>javax.xml.ws.soap.SOAPFaultException: Cannot create a secure XMLInputFactory</td><td>-Dorg.apache.cxf.stax.allowInsecureParser=1</td></tr></tbody></table></div><h2 id="路径问题"><a href="#路径问题" class="headerlink" title="路径问题"></a>路径问题</h2><p>假设程序部署在服务器的<code>/home/weblogic/project</code>中，Weblogic安装在<code>/u01/Oracle/Middleware</code>下面，而且程序会动态生成文件，实际上文件会放在类似于<code>/u01/Oracle/Middleware/user_projects/domains/base_domain/servers/app_server1/stage/project</code>的对应位置中，而且激活更新时候文件会丢失，需要重新生成。</p><p>避免使用中文文件名和中文路径，以免因字符编码问题导致部署或升级失败。举个例子，如果文件里有中文名，打包并解压之后文件名变成了乱码，那么更新的时候Weblogic会提示<code>Error occurred while downloading files from admin server for deployment request &quot;xxx,xxx,xxx&quot;. Underlying error is: &quot;null&quot;</code>。</p><h2 id="数据源名称"><a href="#数据源名称" class="headerlink" title="数据源名称"></a>数据源名称</h2><p>假如JNDI数据源名称为dataSource，在Tomcat中运行时，需要写成<code>java:comp/env/dataSource</code>，但是在Weblogic中运行时要把“java:comp/env/”去掉，直接写成dataSource。</p><h2 id="集群Session丢失问题"><a href="#集群Session丢失问题" class="headerlink" title="集群Session丢失问题"></a>集群Session丢失问题</h2><p>生产环境通常会架设集群，通过负载均衡进行访问。如果负载均衡未按照Cookie进行分配，或者分配策略不完全正确，那么这样的话很可能会存在串Session的问题，例如登录成功之后进的是节点1，稍微做点操作后默默地跳到了节点3，导致会话丢失，系统提示重新登录。因为平时开发不会去使用负载均衡，所以可能注意不到这个问题。</p><p>这个问题可以通过以下几种方法解决：</p><ol><li>正确地配置负载均衡，保证同一会话（JSESSIONID）的流量只分配到同一节点上；</li><li>使用Weblogic的“会话复制”功能（这个比较正统）；</li><li>通过Redis等实现会话共享（比较复杂，而且Weblogic不是没有相关功能，不推荐）。</li></ol><p>会话复制的操作方法可以用Google搜索。</p><div class="note default"><p>由于我们项目比较特殊，所以使用的方法和以上三种均不相同：用户认证和会话控制由集成在上游的系统管理，请求通过上游的反向代理传过来，用户信息保存在特定HTTP Header中，而我们自己项目内的用户验证在Filter中进行，一旦Session丢掉可以直接根据Header信息重建。</p></div><h1 id="部署阶段"><a href="#部署阶段" class="headerlink" title="部署阶段"></a>部署阶段</h1><h2 id="主机名与hosts"><a href="#主机名与hosts" class="headerlink" title="主机名与hosts"></a>主机名与hosts</h2><p>给服务器设置一个固定IP和固定的主机名，然后将服务器的IP与主机名加入到<code>/etc/hosts</code>中。对于Oracle厂的产品，即便后续设置用不到主机名，设置好之后也可以避免一些不必要的麻烦。</p><h2 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h2><p>默认情况下，管理控制台的端口是7001，应用是7003，节点管理器是5556，初次部署时需要注意让防火墙放行这三个端口。</p><p>为了安全，需要仔细控制防火墙的放行范围，不要让7001和5556暴露到互联网上面。另外不要把应用部署到AdminServer上面，否则封锁7001端口之后应用就无法访问了。</p><h2 id="建议进行网络测试"><a href="#建议进行网络测试" class="headerlink" title="建议进行网络测试"></a>建议进行网络测试</h2><p>在开始部署之前，建议在应用服务器上测试一下能否访问数据库等资源。如果网络不通，那么改Weblogic设置时可能会无响应，卡了半天之后才蹦出一句<code>The Network adapter could not establish the connection</code>，白白耽误时间。</p><p>如果系统没装telnet，可以简单地测试一下能不能ping通，或者通过以下Java程序来测一下端口通不通（有些机房可能会出现IP能ping通但是端口被拦截的情况）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IpTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Socket connect = <span class="keyword">new</span> Socket();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String ip = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">int</span> port = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> timeout = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (args.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"用法：java IpTest &lt;IP地址&gt; &lt;端口号&gt; [超时时间]"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ip = args[<span class="number">0</span>];</span><br><span class="line">                port = Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (args.length &gt; <span class="number">2</span>)&#123;</span><br><span class="line">                timeout = Integer.parseInt(args[<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"正在连接 "</span> + ip + <span class="string">":"</span> + port);</span><br><span class="line"></span><br><span class="line">            InetSocketAddress addr = <span class="keyword">new</span> InetSocketAddress(ip, port);</span><br><span class="line">            connect.connect(addr, timeout);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (connect.isConnected()) &#123;</span><br><span class="line">                System.out.println(<span class="string">"连接成功"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"连接失败"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connect.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac IpTest.java</span><br><span class="line">java IpTest 10.15.2.9 1521</span><br></pre></td></tr></table></figure><h2 id="修改java-security"><a href="#修改java-security" class="headerlink" title="修改java.security"></a>修改java.security</h2><p>Java 6存在一个关于随机数的bug，如果不Hack，在Linux系统下面Weblogic建域和启动时需要等待很长时间，因此建议装完Java之后立刻去修改java.security。</p><p>假设$JAVA_HOME为<code>/opt/jdk1.6.0_145</code>，也就是说JDK装在了这个地方，那么需要修改<code>$JAVA_HOME/jre/lib/security/java.security</code>文件，找到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">securerandom.source=file:/dev/urandom</span><br></pre></td></tr></table></figure><p>修改成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">securerandom.source=file:/dev/./urandom</span><br></pre></td></tr></table></figure><p>之后建域和起停之类操作就不需要再等待十多分钟了。</p><h2 id="如果通过控制台启动服务器时起不来"><a href="#如果通过控制台启动服务器时起不来" class="headerlink" title="如果通过控制台启动服务器时起不来"></a>如果通过控制台启动服务器时起不来</h2><p>如果Weblogic各节点已正确设置，各服务器的防火墙已经开放5556端口，NodeManager也已经启动，但是仍然无法通过控制台启动节点，提示“不兼容的状态”，而且在startNodeManager.sh的输出中出现<code>javax.net.ssl.SSLKeyException: [Security:090482]BAD_CERTIFICATE alert was received from ...</code>：</p><h3 id="方法一：重新设置证书"><a href="#方法一：重新设置证书" class="headerlink" title="方法一：重新设置证书"></a>方法一：重新设置证书</h3><p>在集群的每台服务器上面设置一下证书（如果执行第一行命令就报错的话，请把$WL_HOME换成实际安装目录）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">. <span class="variable">$WL_HOME</span>/server/bin/setWLSEnv.sh</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WL_HOME</span>/server/lib</span><br><span class="line">java utils.CertGen -keyfilepass DemoIdentityPassPhrase -certfile newcert -keyfile newkey</span><br><span class="line">java utils.ImportPrivateKey -keystore DemoIdentity.jks -storepass DemoIdentityKeyStorePassPhrase -keyfile newkey.pem -keyfilepass DemoIdentityPassPhrase -certfile newcert.pem -<span class="built_in">alias</span> demoidentity</span><br></pre></td></tr></table></figure><h3 id="方法二：不使用SSL"><a href="#方法二：不使用SSL" class="headerlink" title="方法二：不使用SSL"></a>方法二：不使用SSL</h3><p>除此以外，还有一种做法是不使用SSL通信以避免出现证书问题：修改<code>$WL_HOME/common/nodemanager/nodemanager.properties</code>文件，将其中的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SecureListener = true</span><br></pre></td></tr></table></figure><p>改成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SecureListener = false</span><br></pre></td></tr></table></figure><p>然后重新启动NodeManager。另外在控制台上建立“计算机”时，类型就不再是“SSL”，而是“普通”（Plain）。</p><h2 id="组建集群"><a href="#组建集群" class="headerlink" title="组建集群"></a>组建集群</h2><p>我们并不需要每一台机器都执行一遍建域之类的操作。只要各服务器JDK路径和Weblogic安装路径一致，那么在一台机器上面把Weblogic的各种参数都配置好，然后将user_projects目录打包（或者干脆把整个Middleware打包），复制到其他各服务器上面解压就差不多了。</p><p>如果NodeManager使用SSL，解压完成后，前文提到的“NodeManager证书”还是要在每台服务器上操作一遍。</p><h3 id="（待研究）服务器监听地址不要贸然写成0-0-0-0"><a href="#（待研究）服务器监听地址不要贸然写成0-0-0-0" class="headerlink" title="（待研究）服务器监听地址不要贸然写成0.0.0.0"></a>（待研究）服务器监听地址不要贸然写成0.0.0.0</h3><p>虽然0.0.0.0也是一个有效的监听地址，但是在组建集群时不要贸然地写成0.0.0.0，否则AdminServer与各节点之间的通信会出现问题，例如服务器状态变成UNKNOWN，或者部署应用无响应。具体原因和解决方法待研究。</p><h2 id="增加线程数"><a href="#增加线程数" class="headerlink" title="增加线程数"></a>增加线程数</h2><p>如果预计并发数比较高，可以增加应用线程池的线程数。修改config.xml配置文件（例如<code>/u01/Oracle/Middleware/user_projects/base_domain/config/config.xml</code>）。假如应用服务器叫app_server1，那么需要找到类似以下的代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>app_server1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>修改成</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>app_server1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">self-tuning-thread-pool-size-min</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">self-tuning-thread-pool-size-min</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">self-tuning-thread-pool-size-max</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">self-tuning-thread-pool-size-max</span>&gt;</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>需要注意的是，如果数值改得太大，启动时可能会出现以下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[ERROR][thread ] Could not start thread [ACTIVE] ExecuteThread: &apos;977&apos; for queue: &apos;weblogic.kernel.Default (self-tuning)&apos;. Resource temporarily unavailable</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Attempting to allocate 8192M bytes</span><br><span class="line"></span><br><span class="line">There is insufficient native memory for the Java</span><br><span class="line">Runtime Environment to continue.</span><br><span class="line"></span><br><span class="line">Possible reasons:</span><br><span class="line">  The system is out of physical RAM or swap space</span><br><span class="line">  In 32 bit mode, the process size limit was hit</span><br><span class="line"></span><br><span class="line">Possible solutions:</span><br><span class="line">  Reduce memory load on the system</span><br><span class="line">  Increase physical memory or swap space</span><br><span class="line">  Check if swap backing store is full</span><br><span class="line">  Use 64 bit Java on a 64 bit OS</span><br><span class="line">  Decrease Java heap size (-Xmx/-Xms)</span><br><span class="line">  Decrease number of Java threads</span><br><span class="line">  Decrease Java thread stack sizes (-Xss)</span><br><span class="line">  Disable compressed references (-XXcompressedRefs=false)</span><br><span class="line"></span><br><span class="line">java.lang.OutOfMemoryError: Resource temporarily unavailable in tsStartJavaThread (lifecycle.c:1097).</span><br></pre></td></tr></table></figure><p>报错信息看起来像是内存不足，实际上不是内存不足，而是Linux系统默认情况下限制了最大线程数，需要进行修改。</p><p>如果使用CentOS 6或RHEL6，可以按照以下方法进行修改：</p><p>首先修改/etc/security/limits.conf，加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* hard nofile 1048576</span><br><span class="line">* soft nofile 1048576</span><br></pre></td></tr></table></figure></p><p>然后修改/etc/security/limits.d/90-nproc.conf，加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weblogic   soft    nproc     655350</span><br></pre></td></tr></table></figure></p><p>最后修改/etc/pam.d/login，加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session required /lib64/security/pam_limits.so</span><br></pre></td></tr></table></figure></p><p>修改完成后不要马上退出shell，要开个新窗口测试各账号能否登进去。如果登不进去（例如提示could not open session），说明参数改得太大，需要适当往小调。</p><p>另外如果线程数改大了，内存也应当适当调大，因为每个线程都会占一些内存空间。</p><h1 id="运维阶段"><a href="#运维阶段" class="headerlink" title="运维阶段"></a>运维阶段</h1><h2 id="应用升级"><a href="#应用升级" class="headerlink" title="应用升级"></a>应用升级</h2><p>改完文件之后要在控制台的“部署”里面进行更新，否则内容不会生效。改静态文件也是。</p><p>每次更新的时候，JVM会把Class信息保存到内存的永久保留区域中，而旧的内容不会释放。如果Weblogic启动参数中的-XX:MaxPermSize比较小，那么更新几次可能就会卡死挂掉，而且应用日志会显示<code>java.lang.OutOfMemoryError: PermGen space</code>。在这种情况下，把Weblogic里面的服务器停掉然后再启动一次就好了。</p><p>在开始更新到更新结束，应用会出现短暂的中断，因此要注意选择合适的时间进行操作。另外在业务繁忙时进行更新，不但会影响用户，而且容易因为Weblogic繁忙而导致更新无响应或失败。</p><p>建议编写一份升级检查表，将准备工作、实施工作和收尾工作全部列入，以免因漏项导致升级出现问题。</p><p>如果更新时遭遇<code>Error occurred while downloading files from admin server for deployment request &quot;xxx,xxx,xxx&quot;. Underlying error is: &quot;null&quot;</code>，那么需要去检查AdminServer.log的日志（例如<code>/u01/Oracle/Middleware/user_projects/base_domain/servers/AdminServer/logs/AdminServer.log</code>）。我碰到过两种会出现这种错误的情况，一种是文件名乱码，另一种是文件权限不正确（例如服务以weblogic用户运行，但是文件所有者是root，weblogic访问不了）。假如权限不正确，可以<code>chown -R weblogic:weblogic 存放程序的目录</code>。</p><p>我们部分应用服务器安装了防篡改软件，如果升级之前忘记关闭防护功能，在控制台上激活时会报错，提示无法“remove staged files”。</p><div class="note info"><p>建议在系统中加入可配置参数的系统公告功能，这样在升级或者维护之前可以通知用户，使用户及时做好准备。</p></div><h2 id="重启服务器"><a href="#重启服务器" class="headerlink" title="重启服务器"></a>重启服务器</h2><p>如果只是重启应用节点，操作就比较简单，直接在控制台上操作即可。不过，在Weblogic控制台重启服务的时候不要点完“启动”就不管了，一定要等到状态显示为“RUNNING”之后再收工。如果变成“ADMIN”，那么可能是有报错，需要去应用服务器日志检查一下。若确认不耽误事（例如<code>java.lang.NoClassDefFoundError: com/ctc/wstx/stax/WstxInputFactory</code>）那么在控制台点一下“恢复”就好了。</p><p>如果不慎关掉AdminServer，或者打算整个重启，那么操作会比较麻烦，大体上要按以下思路操作：</p><ol><li>在管理节点上启动AdminServer（startWebLogic.sh）。</li><li>在每个节点上都启动一遍NodeManager（startNodeManager.sh）。</li><li>进入管理控制台，启动各应用节点。</li><li>启动完成后确认“部署”里面各应用是否启动。</li></ol><h2 id="打补丁"><a href="#打补丁" class="headerlink" title="打补丁"></a>打补丁</h2><p>安装补丁之前，需要检查bsu.sh文件（例如<code>/u01/Oracle/Middleware/utils/bsu/bsu.sh</code>），将其中的最大内存Xmx改大些，例如-Xmx2048m。因为打补丁实在太慢，等了半天出来的却是java.lang.OutOfMemoryError的话实在太憋屈。</p><p>打补丁对业务影响不大，可以随时操作，但是打完之后需要重启Weblogic才能生效。</p><h2 id="搬家"><a href="#搬家" class="headerlink" title="搬家"></a>搬家</h2><p>尽量不要搬家，因为Weblogic安装和建域之后会产生很多已经写好了路径的配置文件。即使将它们全部改成新路径，Middleware目录中还有个registry.dat，此文件记录了Weblogic的安装情况，而且已经加密，如果贸然搬家会在升级等方面遇到麻烦。实在需要的话还是建立软链接比较好。</p><h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><p>建议在服务器上面安装专门的监控软件。像我们项目组那种服务器由用户管理，应用由项目组自行运维的情况，更要有自己的监控程序，这样在出现问题时也好及时定位，以免一塌糊涂。</p><p>目前我们项目组自己写了一个监控脚本，在繁忙时期每隔10分钟、空闲时期每隔半小时把Weblogic控制台的一些常用指标记录到日志文件中（通过cron控制），<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2luZm5hbi9zY3JpcHRzL2Jsb2IvbWFzdGVyL+mDqOe9suWSjOi/kOe7tC93ZWJsb2dpYy1tb25pdG9yLnNo" title="https://github.com/infnan/scripts/blob/master/部署和运维/weblogic-monitor.sh">代码见此<i class="fa fa-external-link"></i></span>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文记录我在部署Weblogic时遇到的各种坑。其中JDK为1.6，Weblogic版本11g。&lt;br&gt;
    
    </summary>
    
      <category term="经验" scheme="https://plusnan.me/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Weblogic" scheme="https://plusnan.me/tags/Weblogic/"/>
    
  </entry>
  
  <entry>
    <title>给校招新员工分享的一点人生的经验</title>
    <link href="https://plusnan.me/2018/07/15/to-new-employee/"/>
    <id>https://plusnan.me/2018/07/15/to-new-employee/</id>
    <published>2018-07-14T16:00:00.000Z</published>
    <updated>2019-01-14T06:30:43.228Z</updated>
    
    <content type="html"><![CDATA[<p>我不是长者，不是新闻工作者，工作时间不长，见得也不够多，但是还是有必要向校招来的新员工分享一点人生的经验。<br><a id="more"></a></p><h1 id="别让自己挨骂"><a href="#别让自己挨骂" class="headerlink" title="别让自己挨骂"></a>别让自己挨骂</h1><p>第一印象很重要，而且软件开发是团队工作，如果一开始就给人留下好印象，以后也会过得舒服些；如果不认真工作，或者干得太差劲，给人留下坏印象，那么以后的日子也会过得不舒服。改变印象并不容易，因此入职初期就应当注意工作方法，千万不要犯忌。</p><h2 id="及时报告"><a href="#及时报告" class="headerlink" title="及时报告"></a>及时报告</h2><p>中国有句古话叫做“闷声发大财”，但是软件开发工作需要经常沟通，所以闷声发不了财。以下两点值得特别注意：</p><ol><li>领导和同事安排的任务，完成之后一定要报告。大家都很忙，不可能一直盯着你的进度，而且很多任务需要按顺序进行，如果你早就完成却不吱声，有可能耽误事，甚至被误会成没工作。</li><li>如果遇到困难，可能无法在预期时间内完成任务，一定要立刻汇报。及早暴露问题通常不会挨骂，而且能让领导和同事及时研究对策。假如给你分配一个限一周内完成的任务，你等到最后一天领导问你的时候才说“自己什么都不会，所以没做出来”，后果可想而知。</li></ol><p>工作过程中会经常遇到问题，包括技术方面的、业务方面的以及现实层面的。有问题很正常，但是攒着不解决就不正常了。遇到问题的时候，可以先尝试找资料，如果还是无法理解，或者忙活了两三个小时还是没有进展，那么请直接去找同事。很多时候你解决不了的问题，有经验的同事很快就能解决。</p><h2 id="注意记录"><a href="#注意记录" class="headerlink" title="注意记录"></a>注意记录</h2><p>重要事项应当作记录，而且要及时维护。像需求变更、数据库表结构变更之类的重要变更，或者是数据库表结构这种需要各库同步的东西，如果没有准确的记录，结果会很糟糕。</p><p>与用户或其他单位交流时更要注意留存证据，有条件的话最好截图/录音。开会、评审等活动必须有会议纪要和与会者的签名，以保障自己的利益。</p><p>开发工作中经常有很多琐事和问题，这些也应当记录下来，不然的话很快就忘记了。除此之外，建议不定期地总结一下自己手头的工作，完善程序注释，并且写出一些文档（例如自制构件的使用方法、某项工作的操作步骤或者配置注意事项等）。这种文档不是为了交差或者给领导汇报，而是为了方便让别人帮忙或把工作推出去。</p><div class="note info"><h3 id="记录的形式"><a href="#记录的形式" class="headerlink" title="记录的形式"></a>记录的形式</h3><p>记录的形式很多，例如：</p><ol><li>纸质记录：笔记本、便利贴</li><li>以笔记形式记录：OneNote、Evernote、Leanote</li><li>以博客形式记录：WordPress、Hexo</li><li>以维基形式记录：MediaWiki</li></ol><p>如果程序会暴露到互联网上，请注意保护个人隐私和公司机密。</p></div><h2 id="避免挖坑"><a href="#避免挖坑" class="headerlink" title="避免挖坑"></a>避免挖坑</h2><p>我觉得，如果你在同事中的口碑很差，那么大概有三种可能：一种是太烦人，一种是根本不好好干活，还有一种是老给其他人挖坑。挖坑的情况有很多种，比方说代码极其难懂，或者留下了很久以后才被发现的缺陷，或者经常制造缺陷，或者把好好的东西改坏等等。</p><p>后来者不熟悉项目情况，无论水平多高，接手新工作都有可能出问题，所以工作时候务必细心，抠得细一些，不懂要多提问。事实上，除非为了纯粹地赶进度，我们要的不是迅速完成工作，而是在合理时间范围内尽可能高质量地完成工作。</p><p>建议一开始不要急着投入工作。先去花点时间，大概了解一下自己工作的内容，了解相关的业务场景和需求。换句话说，先去弄清楚：项目是做什么的？我手头的工作是做什么的？面向的群体是谁？目标群体的关注点是什么？</p><p>投入实际开发之前肯定要搭建开发环境。不要光想着成功启动，有闲工夫的话还要了解一下项目的大概代码结构、系统概况，了解各环境与数据库，掌握编码规范、开发规范或注意事项等，搞清楚什么事情不能做，什么事情需要请示或评审。</p><p>若可以通过仿写其他代码来完成工作，那么建议找熟悉程序的老员工来评估一下代码质量，让他们确认一下有没有前人挖过的坑。</p><p>开发完成之后务必要自测，而且不要光测合法情况，还要测试非法情况。如果是修改功能，那么要测一下原来的功能还能否正常工作。鉴于新人不熟悉项目，老员工有必要主动去评审代码，指导或监督新人进行测试，而且“授人以鱼不如授人以渔”。</p><h1 id="提高知识水平"><a href="#提高知识水平" class="headerlink" title="提高知识水平"></a>提高知识水平</h1><p>无论准备往技术方向发展，还是往管理方向发展，都要提高自己的知识水平。</p><p>一开始什么都不懂是正常现象。学校所学基本上与工作脱节，所以实际上很多人都是白纸一张。这也意味着自学能力非常重要，毕竟工作一段时间之后还是什么都不懂就不正常了。</p><div class="note info"><p>在此提醒：争取做技术或管理专家，避免做业务专家，因为后者主要是无谓的重复劳动，而且太精通业务的话容易陷坑里出不来，换家公司的话业务知识积累也会全部白瞎。</p></div><h2 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h2><p>在技术方面遇到问题，建议直接用Google搜英语，搜不到的话可以去StackOverflow上面提问。想找一些程序的话，也可以去GitHub搜一下有没有现成的开源程序。有很多问题用英语可以比较容易地找到答案，但是用百度搜只能搜到翻来覆去的重复结果，或者干脆搜不到。</p><div class="note info"><h3 id="关于翻墙"><a href="#关于翻墙" class="headerlink" title="关于翻墙"></a>关于翻墙</h3><p>我觉得翻墙就应该是一种常识般的存在。如果没翻过墙，可以先去<span class="exturl" data-url="aHR0cHM6Ly92dWx0ci5jb20=" title="https://vultr.com">Vultr<i class="fa fa-external-link"></i></span>买台服务器，用<span class="exturl" data-url="aHR0cHM6Ly90ZWRkeXN1bi5jb20vNDg2Lmh0bWw=" title="https://teddysun.com/486.html">这里<i class="fa fa-external-link"></i></span>和<span class="exturl" data-url="aHR0cHM6Ly90ZWRkeXN1bi5jb20vNDg5Lmh0bWw=" title="https://teddysun.com/489.html">这里<i class="fa fa-external-link"></i></span>的脚本安装服务器端Shadowsocks，然后再<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NoYWRvd3NvY2tzL3NoYWRvd3NvY2tzLXdpbmRvd3MvcmVsZWFzZXM=" title="https://github.com/shadowsocks/shadowsocks-windows/releases">下载客户端<i class="fa fa-external-link"></i></span>，与服务器进行连接。</p><p>稍微离个题，很多人在翻墙之后会很自然地试图接触政治内容，我的建议是：不要随便参与政治，无论它是你所认为的正确内容还是错误内容。墙外的情况很复杂，什么人都有，而且很多事情和你想的完全不一样。如果看到与自己认识不同的言论之后情绪激动，那么请直接远离政治，不要尝试去捍卫正确立场。乱来的话只会让自己不爽，甚至招来麻烦。</p></div><h2 id="加班"><a href="#加班" class="headerlink" title="加班"></a>加班</h2><p>如果还没抱老婆孩子，也不急着操心安家的事情，建议平时稍微加点班。不是因为工作干不完或者干额外工作而加班，而是挤一些闲工夫来加强学习。工作很辛苦，精力不会再像学生时候那样旺盛，两三年以后可能连刷夜打游戏都扛不住，所以充电要趁早。</p><h2 id="玩"><a href="#玩" class="headerlink" title="玩"></a>玩</h2><p>这里的“玩”指的不是打游戏，而是在技术层面上折腾，<span class="exturl" data-url="aHR0cHM6Ly9wcm9ncmFtLXRoaW5rLmJsb2dzcG90LmNvbS8yMDE3LzA0L1RoZS1JbXBvcnRhbmNlLW9mLVpoZXRlbmcuaHRtbA==" title="https://program-think.blogspot.com/2017/04/The-Importance-of-Zheteng.html">通过折腾来提升自己的水平<i class="fa fa-external-link"></i></span>。</p><p>以我自己举例：</p><ol><li>花点时间学习一门副语言Python，写一些小程序玩。有需要的话便可以随手写一个辅助工作的脚本，例如调试接口等。</li><li>搞一个VPS，除了用来翻墙，还能用来学习Linux系统管理（<a href="/plus1s">也可以用来续秒</a>）。折腾LAMP之类东西还有助于加深对网络的认识。</li><li>在目前参与开发的系统中乱点，自己造数据来办理业务，有助于加深对系统整体和各具体业务的了解。另外为了快速准备业务数据需要使用PL/SQL。</li></ol><div class="note info"><p>假如只是折腾玩，对网络没有特殊要求，建议搞国外主机，一方面是因为比国内便宜，另一方面是因为<span class="exturl" data-url="aHR0cDovL2NuLnVuY3ljbG9wZWRpYS53aWtpYS5jb20vd2lraS8lRTYlOUMlODklRTUlODUlQjMlRTklODMlQTglRTklOTclQTg=" title="http://cn.uncyclopedia.wikia.com/wiki/%E6%9C%89%E5%85%B3%E9%83%A8%E9%97%A8">有关部门<i class="fa fa-external-link"></i></span>管不着，不需要乱七八糟的手续。</p><p>折腾VPS需要花钱，建议提前准备一张有VISA或MasterCard标志的信用卡。另外，如果已经搞到VISA/MasterCard卡，可以去Google Compute Engine注册新用户，把信用卡绑上，然后就可以免费使用一年。</p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我不是长者，不是新闻工作者，工作时间不长，见得也不够多，但是还是有必要向校招来的新员工分享一点人生的经验。&lt;br&gt;
    
    </summary>
    
      <category term="经验" scheme="https://plusnan.me/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="工作" scheme="https://plusnan.me/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>接口设计与联调经验</title>
    <link href="https://plusnan.me/2018/07/14/cross-company-debug/"/>
    <id>https://plusnan.me/2018/07/14/cross-company-debug/</id>
    <published>2018-07-13T16:00:00.000Z</published>
    <updated>2019-01-13T14:12:51.322Z</updated>
    
    <content type="html"><![CDATA[<p>不同系统之间存取数据，技术上最简单的方式就是提供接口。既然是不同系统，那么大家很可能不是同一家单位，需要留意的事情也会更多。本文记录了一些接口设计、联调前后需要考虑的事情。总体上来讲，我们既要保证准确实现功能，又要留个心眼，保护自己的利益，避免让自己吃亏。<br><a id="more"></a> </p><h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><p>虽然接口的原理很简单，开发工作量可能也比其他开发工作少很多，但是需要留意，在业务问题上“我这样想”不代表“对方也会这样想”，并且开发时的沟通成本往往会比较高，上线之后一旦出现故障可能还会互相踢皮球，因此也不能把设计工作想象得太简单。</p><ol><li>约定好具体的数据格式、字符编码和收发方式！例如“传JSON”既可能是直接HTTP POST一段JSON（application/json），也可能是调用WebService，里面参数为JSON（application/xml），前者通常是在用户浏览器上通过AJAX调用，后者可能是自己后台直接调用对方的服务器，不经过用户的界面。如果连这个都弄错，后续发现问题时就要全部推倒重来了；</li><li>确保双方对于每个函数、每个参数的理解是一致的。特别是业务系统，对方对业务场景与业务的理解可能与我们很不一样，因此要多进行确认，及时更新和完善文档；</li><li>接口定义要慎重，因为调整定义的成本比调整实现的成本高得多，而且接口定义和值域不要定得太死（<span class="exturl" data-url="aHR0cHM6Ly8zNmtyLmNvbS9wLzIxNzczNi5odG1s" title="https://36kr.com/p/217736.html">即使是性别也不一定只有男、女和其他<i class="fa fa-external-link"></i></span>），要有能够调整和扩展的空间；</li><li>搞清楚接口调用时机、频率，估计一下接口调用数据规模，避免因为频率不当或者数据规模太大而出问题；</li><li>有异常处理和超时机制，能够正确处理目标服务器宕机、404、500、长时间不返回等情况。接口恢复后，故障期间产生的数据能够正确消化掉；</li><li>检查输入数据是否合法（格式正确、符合业务要求以及具有业务权限），拒绝格式不合规范的数据，避免出现类似用户改个ID就能查看或修改别人数据的情况；</li><li>对于有状态的数据，约定好重复发送请求（例如用户或程序重复提交工作单）的后果；</li><li>考虑专门的日志记录，例如使用专门的文件或在数据库建立接口日志表；</li><li>有认证机制和访问控制机制，防止接口被无关厂商及人员冒用或恶意调用。</li></ol><h1 id="联调"><a href="#联调" class="headerlink" title="联调"></a>联调</h1><p>联调最典型的就是沟通成本，因为沟通成本高所以容易积攒问题，因此建议：</p><ol><li>组织不定期交流，有条件当面聊的话最好当面聊，没有条件的话也要有语音视频会议，避免纯文字交流，免得越做偏差越大；</li><li>早联调、多联调，早点暴露问题，不要等一切都准备好之后才开始调；</li><li>有条件的话可以准备能随时调用的环境（当然也要给对方准备数据）。</li></ol><p>如果是不同公司之间进行合作，务必要留证据！具体而言：</p><ol><li>记录哪天、与哪个人、调试了什么东西、结果如何；</li><li>各接口函数要输出日志，记录时间、原始数据和一些关键数据；</li><li>重要内容留截图。</li></ol><p>推荐两个调试接口的软件，一个是专门测WebService的<span class="exturl" data-url="aHR0cHM6Ly93d3cuc29hcHVpLm9yZw==" title="https://www.soapui.org">SoapUI<i class="fa fa-external-link"></i></span>，另一个是可以测各种请求的<span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2V0cG9zdG1hbi5jb20vYXBwcw==" title="https://www.getpostman.com/apps">Postman<i class="fa fa-external-link"></i></span>。对我个人而言，由于我们项目经常是WebService里面套JSON，所以SoapUI用得并不舒服，不如自己抓到调用WebService的原始请求内容然后全部扔到Postman中调试：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">soap:Envelope</span> <span class="attr">xmlns:soap</span>=<span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">soap:Body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ns1:xxxxxmethod</span> <span class="attr">xmlns:ns1</span>=<span class="string">"http://service.xxx.xxxcompany.com/"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">arg0</span>&gt;</span></span><br><span class="line">                &#123;</span><br><span class="line">                    "param1": "xxx",</span><br><span class="line">                    "param2": "yyy",</span><br><span class="line">                    ...</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">arg0</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ns1:xxxxxmethod</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">soap:Body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soap:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果主要系统已经上线了，注意不要在生产环境或使用生产库直接联调，而是要准备一个和生产环境架构相似的测试环境，在测试环境上进行联调。在生产环境和生产库上，双方最多测试接口和功能能否走通。</p><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>上线之后更要专门记录接口的调用情况，做到有据可查。清楚地了解接口调用情况、频率以及状态，在出现故障时可以尽量避免踢皮球和承担无谓责任。有必要的话还应该实行访问控制，一旦遭遇攻击或疑似攻击（例如调用频率太高等）时可以方便地进行处理。</p><p>运行之后，假如要对接口进行重大调整，那么要确保向后兼容，除非非常确定大家不会再使用旧版定义了。</p><div class="note info"><p>我们系统有一个接口经常出问题，责任经常在对方，但是用户总给我们客服打电话，而且对方公司经常消极对待，于是我一怒之下把对方公司的名字和客服电话写到展示给用户的错误信息里面了。</p></div><h1 id="补充技巧：内网穿透"><a href="#补充技巧：内网穿透" class="headerlink" title="补充技巧：内网穿透"></a>补充技巧：内网穿透</h1><p>理想情况下应该建立一个双方都便于访问的开发测试区。如果没有条件或者来不及准备，而且双方公司都能访问互联网，可以通过内网穿透的方法把本地应用映射到公网上。</p><p>操作之前去搞一台VPS。我个人推荐<span class="exturl" data-url="aHR0cHM6Ly92dWx0ci5jb20=" title="https://vultr.com">Vultr<i class="fa fa-external-link"></i></span>，因为他家VPS价格比较便宜，而且按使用时间计费，可以随时买随时扔。对于内网穿透而言，每月$5（备注：支持支付宝和微信支付）的VPS足矣。</p><div class="note danger"><p>计划以内网穿透方法进行联调之前，请留意自己公司的管理制度里面有没有网络限制，以免倒霉被抓挨罚。如果能以遵守制度的方式将内网端口映射到公网，建议走公司的手续。</p></div><div class="note info"><p>使用Vultr部署时建议选择洛杉矶或东京节点，这两个网络相对而言比较好。购买时注意不要选$2.5的机器，因为没有IPv4地址。</p></div><div class="note warning"><p>有时候你的服务器会出现Ping不通，或者出现能Ping通但是SSH连接超时的情况，这很可能是你服务器的IP或端口被墙了。如果遇到这种情况，可以去买一台新机器并删除旧的机器。另外有时候需要多刷几次。</p></div><p>新机器启动之后，先在公司Ping一下，没问题的话就可以用PuTTY等软件建立连接了。输入Vultr网站上面给你提供的服务器IP（端口22）、用户名和密码，然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>将其中的<code>GatewayPorts no</code>改成<code>yes</code>，没找到的话就在文件末尾追加一行，保存。然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart sshd</span><br></pre></td></tr></table></figure><p>准备工作就做好了。</p><div class="note warning"><p>有些操作系统（例如CentOS）会默认开启防火墙，所以要确认一下防火墙状态，然后关闭防火墙或者开放待使用端口。</p></div><p>联调时先去下载PuTTY，启动，在里面输入服务器地址和端口（默认22），并且按下图进行设置</p><p><img src="/img/cross-company-debug/putty-tunnel.png" alt="PuTTY设置"></p><p>不要忘记点Add按钮。假如本机是<code>http://172.18.106.3:8080</code>，服务器IP是198.13.60.108，你选择的端口是8080，那么登录成功后就可以通过<code>http://198.13.60.108:8080</code>来访问自己的应用了。</p><div class="note warning"><p>因为是外国服务器，所以连接可能不太稳定，需要不定期检查连接，断了的话随时重新连。</p></div><div class="note info"><p>如果需要域名，我个人建议去<span class="exturl" data-url="aHR0cHM6Ly9uYW1lY2hlYXAuY29t" title="https://namecheap.com">Namecheap<i class="fa fa-external-link"></i></span>上面购买个便宜的外国域名（注意：需要准备Visa/MasterCard信用卡）。如果还需要HTTPS，可以使用Let’s Encrypt。如果有国内已备案域名，也可以给应用建个二级域名，但是在国内购买新的一级域名需要花时间备案。</p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不同系统之间存取数据，技术上最简单的方式就是提供接口。既然是不同系统，那么大家很可能不是同一家单位，需要留意的事情也会更多。本文记录了一些接口设计、联调前后需要考虑的事情。总体上来讲，我们既要保证准确实现功能，又要留个心眼，保护自己的利益，避免让自己吃亏。&lt;br&gt;
    
    </summary>
    
      <category term="经验" scheme="https://plusnan.me/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Web" scheme="https://plusnan.me/tags/Web/"/>
    
      <category term="项目实施" scheme="https://plusnan.me/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%96%BD/"/>
    
      <category term="内网穿透" scheme="https://plusnan.me/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Web应用部署注意事项</title>
    <link href="https://plusnan.me/2018/05/15/deployment/"/>
    <id>https://plusnan.me/2018/05/15/deployment/</id>
    <published>2018-05-14T16:00:00.000Z</published>
    <updated>2019-01-05T15:42:33.655Z</updated>
    
    <content type="html"><![CDATA[<p>部署Web应用是一项细活：它的配置和操作通常涉及各方面，而且要求准确无误。平时注意配置管理，工作认真负责，方可保证应用正常上线运行。<br><a id="more"></a> </p><h1 id="部署之前"><a href="#部署之前" class="headerlink" title="部署之前"></a>部署之前</h1><h2 id="开发时"><a href="#开发时" class="headerlink" title="开发时"></a>开发时</h2><p>早在开发阶段就应当注意整理和维护应用配置，包括但不限于：</p><ol><li>各数据源的配置（地址、端口、实例、用户名、密码）与涉及的配置文件；</li><li>外部接口的地址（IP、端口、路径等）与涉及的配置文件；</li><li>依赖的外部程序（例如ImageMagick等）；</li><li>应用中开发模式/生产模式的切换开关（如果有的话）；</li><li>涉及文件操作的目录路径（如果需要在应用程序目录中读写文件的话）；</li><li>准确的数据库表结构（字段名、类型、长度、Nullable）、索引、序列（如使用Oracle等数据库）、触发器、存储过程、函数以及字典数据内容。在维护数据库时应注意同步数据库设计文档、开发库、测试库，系统部署时还要同步维护生产库。</li></ol><p>开发过程中，如无特殊需求，应避免将应用地址、端口或路径写死，否则的话，一旦需要更换地址或路径就会遇到很大的麻烦。</p><h2 id="上线前"><a href="#上线前" class="headerlink" title="上线前"></a>上线前</h2><p>准备部署之前，应完整识别出开发/测试环境与生产环境配置的差异，避免疏漏。除此之外，强烈建议对各服务器资源和部署步骤进行记录，例如：</p><ol><li>各服务器内网IP地址、公网IP地址、操作系统、CPU、内存、硬盘空间；</li><li>各服务器用途（数据库/应用节点/负载均衡等）；</li><li>各服务器主要应用及版本；</li><li>各服务器登录方式；</li><li>应用或数据部署路径；</li><li>系统设置，包括防火墙、参数设定等。</li></ol><p>操作生产环境之前，最好找个类似的测试环境进行测试，了解如何处理意外情况（例如断电、死机、系统慢等）。</p><p>如果预计需要频繁部署，建议写部署脚本。</p><h1 id="部署中"><a href="#部署中" class="headerlink" title="部署中"></a>部署中</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>部署数据库时应注意：</p><ol><li>确保数据库软件已正确安装和启动；</li><li>表空间、账号密码正确；</li><li>字符集配置正确；</li><li>正确建立表结构、索引、序列、触发器、存储过程、函数等；对于升级，正确将旧结构修改成新结构；</li><li>正确初始化字典数据；</li><li>根据实际情况调整连接数和 Max open files 等设置。</li></ol><h2 id="应用服务器"><a href="#应用服务器" class="headerlink" title="应用服务器"></a>应用服务器</h2><p>部署应用时需要注意：</p><ol><li>各软件（如Apache、PHP和应用所需外部程序）已正确安装，环境变量、端口、证书（HTTPS）正确配置；</li><li>程序代码或编译后文件已放到正确位置；</li><li>如果应用不是以root身份启动，那么程序文件已设置正确所有者；</li><li>应用程序配置、数据源已按生产环境进行修改；</li><li>系统防火墙和相关外部接口已正确配置；</li><li>如果系统规模较大，Max open files 数量（/etc/security/limits.conf）和 fs.file-max（/etc/sysctl.conf）已进行调整；</li><li>了解如何取用后台日志。</li></ol><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><ol><li>注意各节点应配置好；</li><li>注意负载均衡算法的选择；</li><li>注意会话保持的设置。</li></ol><h1 id="部署之后"><a href="#部署之后" class="headerlink" title="部署之后"></a>部署之后</h1><p>部署时或部署完成后，仍然要对资源和使用情况进行整理总结，以便后续运维。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;部署Web应用是一项细活：它的配置和操作通常涉及各方面，而且要求准确无误。平时注意配置管理，工作认真负责，方可保证应用正常上线运行。&lt;br&gt;
    
    </summary>
    
      <category term="经验" scheme="https://plusnan.me/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Web" scheme="https://plusnan.me/tags/Web/"/>
    
      <category term="项目实施" scheme="https://plusnan.me/tags/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%96%BD/"/>
    
  </entry>
  
</feed>
