<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Christ Wu&#39;s Blog</title>
  
  <subtitle>一点微小的博客</subtitle>
  <link href="/rss.xml" rel="self"/>
  
  <link href="https://christwu.github.io/"/>
  <updated>2018-07-14T06:27:15.823Z</updated>
  <id>https://christwu.github.io/</id>
  
  <author>
    <name>Christ Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>跨公司接口联调</title>
    <link href="https://christwu.github.io/2018/07/14/cross-company-debug/"/>
    <id>https://christwu.github.io/2018/07/14/cross-company-debug/</id>
    <published>2018-07-13T16:00:00.000Z</published>
    <updated>2018-07-14T06:27:15.823Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下在联调前后需要考虑的事情，以及内网穿透的操作方法。<br><a id="more"></a> </p><h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><ol><li>确保双方对于每个函数、每个参数的理解是一致的。特别是业务系统，对方对业务场景与业务的理解可能与我们很不一样；</li><li>搞清楚接口调用时机、频率，估计一下接口调用数据规模，避免因为频率不当或者数据规模太大而出问题；</li><li>有异常处理机制，能够正确处理目标服务器宕机、返回404、长时间不返回等情况。接口恢复后，故障期间产生的数据能够正确消化掉；</li><li>检查输入数据是否合法；</li><li>对于有状态的数据，约定好重复发送请求的后果。</li></ol><h1 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h1><p><strong>务必要留证据！</strong>有据可查，可以尽量避免承担无谓责任，尽量避免扯皮的情况。具体而言：</p><ol><li>记录哪天、与哪个人、调试了什么东西、结果如何；</li><li>各接口函数要输出日志，记录时间、原始数据和一些关键数据；</li><li>重要内容留截图。</li></ol><h1 id="补充技巧：内网穿透"><a href="#补充技巧：内网穿透" class="headerlink" title="补充技巧：内网穿透"></a>补充技巧：内网穿透</h1><p>理想情况下应该建立一个双方都便于访问的开发测试区。如果没有条件或者来不及准备，而且双方公司都能访问互联网，可以通过内网穿透的方法把本地应用映射到公网上。</p><p>操作之前去搞一台VPS。我个人推荐<a href="https://vultr.com" target="_blank" rel="noopener">Vultr</a>，因为国外不需要实名认证，而且Vultr按使用时间计费，可以随时买随时扔。对于内网穿透而言，最低配置的VPS足矣。</p><p>以Ubuntu系统为例，使用之前先在公司Ping一下，Ping不通说明被墙了，销毁之后再买一台即可。没问题的话，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>将其中的<code>GatewayPorts no</code>改成<code>yes</code>，没找到的话就在文件末尾追加一行，保存。然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart sshd</span><br></pre></td></tr></table></figure><p>准备工作就做好了。</p><p>联调时先去下载PuTTY，启动，在里面输入服务器地址和端口（默认22），并且按下图进行设置</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/cross-company-debug/putty-tunnel.png" alt="PuTTY设置" title="">                </div>                <div class="image-caption">PuTTY设置</div>            </figure><p>不要忘记点Add按钮。假如本机是<code>http://172.18.106.3:8080</code>，服务器IP是198.13.60.108，你选择的端口是8080，那么登录成功后就可以通过<code>http://198.13.60.108:8080</code>来访问自己的应用了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下在联调前后需要考虑的事情，以及内网穿透的操作方法。&lt;br&gt;
    
    </summary>
    
      <category term="经验" scheme="https://christwu.github.io/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Web" scheme="https://christwu.github.io/tags/Web/"/>
    
      <category term="内网穿透" scheme="https://christwu.github.io/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Web应用部署注意事项</title>
    <link href="https://christwu.github.io/2018/05/15/deployment/"/>
    <id>https://christwu.github.io/2018/05/15/deployment/</id>
    <published>2018-05-14T16:00:00.000Z</published>
    <updated>2018-05-19T12:27:20.803Z</updated>
    
    <content type="html"><![CDATA[<p>部署Web应用是一项细活：它的配置和操作通常涉及各方面，而且要求准确无误。平时注意配置管理，工作认真负责，方可保证应用正常上线运行。<br><a id="more"></a> </p><h1 id="部署之前"><a href="#部署之前" class="headerlink" title="部署之前"></a>部署之前</h1><h2 id="开发时"><a href="#开发时" class="headerlink" title="开发时"></a>开发时</h2><p>早在开发阶段就应当注意整理和维护应用配置，包括但不限于：</p><ol><li>各数据源的配置（地址、端口、实例、用户名、密码）与涉及的配置文件；</li><li>外部接口的地址（IP、端口、路径等）与涉及的配置文件；</li><li>依赖的外部程序（例如ImageMagick等）；</li><li>应用中开发模式/生产模式的切换开关（如果有的话）；</li><li>涉及文件操作的目录路径（如果需要在应用程序目录中读写文件的话）；</li><li>准确的数据库表结构（字段名、类型、长度、Nullable）、索引、序列（如使用Oracle等数据库）、触发器、存储过程、函数以及字典数据内容。在维护数据库时应注意同步数据库设计文档、开发库、测试库，系统部署时还要同步维护生产库。</li></ol><p>开发过程中，如无特殊需求，应避免将应用地址、端口或路径写死，否则的话，一旦需要更换地址或路径就会遇到很大的麻烦。</p><h2 id="上线前"><a href="#上线前" class="headerlink" title="上线前"></a>上线前</h2><p>准备部署之前，应完整识别出开发/测试环境与生产环境配置的差异，避免疏漏。除此之外，强烈建议对各服务器资源和部署步骤进行记录，例如：</p><ol><li>各服务器内网IP地址、公网IP地址、操作系统、CPU、内存、硬盘空间；</li><li>各服务器用途（数据库/应用节点/负载均衡等）；</li><li>各服务器主要应用及版本；</li><li>各服务器登录方式；</li><li>应用或数据部署路径；</li><li>系统设置，包括防火墙、参数设定等。</li></ol><p>操作生产环境之前，最好找个类似的测试环境进行测试，了解如何处理意外情况（例如断电、死机、系统慢等）。</p><p>如果预计需要频繁部署，建议写部署脚本。</p><h1 id="部署中"><a href="#部署中" class="headerlink" title="部署中"></a>部署中</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>部署数据库时应注意：</p><ol><li>确保数据库软件已正确安装和启动；</li><li>表空间、账号密码正确；</li><li>字符集配置正确；</li><li>正确建立表结构、索引、序列、触发器、存储过程、函数等；对于升级，正确将旧结构修改成新结构；</li><li>正确初始化字典数据；</li><li>根据实际情况调整连接数和 Max open files 等设置。</li></ol><h2 id="应用服务器"><a href="#应用服务器" class="headerlink" title="应用服务器"></a>应用服务器</h2><p>部署应用时需要注意：</p><ol><li>各软件（如Apache、PHP和应用所需外部程序）已正确安装，环境变量、端口、证书（HTTPS）正确配置；</li><li>程序代码或编译后文件已放到正确位置；</li><li>如果应用不是以root身份启动，那么程序文件已设置正确所有者；</li><li>应用程序配置、数据源已按生产环境进行修改；</li><li>系统防火墙和相关外部接口已正确配置；</li><li>如果系统规模较大，Max open files 数量（/etc/security/limits.conf）和 fs.file-max（/etc/sysctl.conf）已进行调整；</li><li>了解如何取用后台日志。</li></ol><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><ol><li>注意各节点应配置好；</li><li>注意负载均衡算法的选择；</li><li>注意会话保持的设置。</li></ol><h1 id="部署之后"><a href="#部署之后" class="headerlink" title="部署之后"></a>部署之后</h1><p>部署时或部署完成后，仍然要对资源和使用情况进行整理总结，以便后续运维。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;部署Web应用是一项细活：它的配置和操作通常涉及各方面，而且要求准确无误。平时注意配置管理，工作认真负责，方可保证应用正常上线运行。&lt;br&gt;
    
    </summary>
    
      <category term="经验" scheme="https://christwu.github.io/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Web" scheme="https://christwu.github.io/tags/Web/"/>
    
  </entry>
  
</feed>
