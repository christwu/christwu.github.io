<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>InfNaN Blog</title>
  
  <subtitle>一点微小的博客</subtitle>
  <link href="/rss.xml" rel="self"/>
  
  <link href="https://infnan.github.io/"/>
  <updated>2018-11-01T18:41:37.031Z</updated>
  <id>https://infnan.github.io/</id>
  
  <author>
    <name>InfNaN</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Weblogic踩坑记录</title>
    <link href="https://infnan.github.io/2018/11/02/weblogic-caution/"/>
    <id>https://infnan.github.io/2018/11/02/weblogic-caution/</id>
    <published>2018-11-01T16:00:00.000Z</published>
    <updated>2018-11-01T18:41:37.031Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录我在部署Weblogic时遇到的各种坑。其中JDK为1.6，Weblogic版本10.3.6。<br><a id="more"></a></p><style>#post-content table {    word-break: break-all;}</style><h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><h2 id="保持版本一致"><a href="#保持版本一致" class="headerlink" title="保持版本一致"></a>保持版本一致</h2><p>开发环境、测试环境和生产环境的JDK与中间件版本应该保持一致，至少测试环境和生产环境要一致。开发时用某个版本JDK和Tomcat，部署到生产环境时用另一个版本的JDK和Weblogic，这样很容易遭遇意外。</p><h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><p>假设程序部署在服务器的/home/weblogic/project中，Weblogic安装在/u01/Oracle/Middleware下面，而且程序会动态生成文件，实际上文件会放在类似于/u01/Oracle/Middleware/user_projects/domains/base_domain/servers/app_server1/stage/project的对应位置中。</p><h2 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h2><p>假如JNDI数据源名称为dataSource，在Tomcat中运行时，需要写成java:comp/env/dataSource，但是在Weblogic中运行时要把“java:comp/env/”去掉，直接写成dataSource。</p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>生产环境通常会架设集群，通过负载均衡进行访问，这样的话很可能存在串Session的问题，例如登录成功之后稍微做点操作会话就丢失了。因为平时开发不会去使用负载均衡，所以可能注意不到这个问题。</p><p>部署时要注意，要么在Weblogic上面配置共享Session，要么注意负载均衡策略，同一会话时应当将流量分配到同一服务器上面。</p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><p>默认情况下，管理控制台的端口是7001，应用是7003，节点管理器是5556，初次部署时需要注意让防火墙放行这三个端口。</p><p>为了安全，需要仔细控制防火墙的放行范围，不要让7001和5556暴露到互联网上面。另外不要把应用部署到AdminServer上面，否则封锁7001端口之后应用就无法访问了。</p><h2 id="修改java-security"><a href="#修改java-security" class="headerlink" title="修改java.security"></a>修改java.security</h2><p>Java 6存在一个关于随机数的bug，如果不Hack，Weblogic建域和启动时需要等待很长时间，因此建议装完Java之后立刻去修改java.security。</p><p>假设JDK安装在/opt/jdk1.6.0_145下面，则需要修改/opt/jdk1.6.0_145/jre/lib/security/java.security文件，找到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">securerandom.source=file:/dev/urandom</span><br></pre></td></tr></table></figure><p>修改成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">securerandom.source=file:/dev/./urandom</span><br></pre></td></tr></table></figure><p>之后建域和起停之类操作就不需要再等待十多分钟了。</p><h2 id="无法通过控制台启动服务器"><a href="#无法通过控制台启动服务器" class="headerlink" title="无法通过控制台启动服务器"></a>无法通过控制台启动服务器</h2><p>如果Weblogic各节点已正确设置，各服务器的防火墙已经开放5556端口，Nodemanager也已经启动，但是仍然无法通过控制台启动节点，提示“不兼容的状态”，而且在Nodemanager的输出中出现“javax.net.ssl.SSLKeyException: [Security:090482]BAD_CERTIFICATE alert was received from …”，那么需要在每个服务器上面设置一下证书：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">. <span class="variable">$WL_HOME</span>/server/bin/setWLSEnv.sh</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WL_HOME</span>/server/lib</span><br><span class="line">java utils.CertGen -keyfilepass DemoIdentityPassPhrase -certfile newcert -keyfile newkey</span><br><span class="line">java utils.ImportPrivateKey -keystore DemoIdentity.jks -storepass DemoIdentityKeyStorePassPhrase -keyfile newkey.pem -keyfilepass DemoIdentityPassPhrase -certfile newcert.pem -<span class="built_in">alias</span> demoidentity</span><br></pre></td></tr></table></figure><h2 id="组建集群"><a href="#组建集群" class="headerlink" title="组建集群"></a>组建集群</h2><p>我们并不需要每一台机器都执行一遍建域之类的操作。只要在一台机器上面把Weblogic的各种参数都配置好，然后将Middleware目录打包，复制到其他各服务器上面解压就差不多了。</p><p>解压完成后，前文提到的“Nodemanager证书”还是要在每台服务器上操作一遍。</p><h2 id="一些报错与处理"><a href="#一些报错与处理" class="headerlink" title="一些报错与处理"></a>一些报错与处理</h2><p>以下问题可以通过修改Weblogic启动参数解决。</p><table><thead><tr><th>场景</th><th>错误信息</th><th>启动参数</th></tr></thead><tbody><tr><td>生成图片</td><td>java.awt.HeadlessException</td><td>-Djava.awt.headless=true</td></tr><tr><td>访问HTTPS网站</td><td>javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: No trusted certificate found exception</td><td>-DUseSunHttpHandler=true</td></tr><tr><td>Apache CXF提供WebService服务</td><td>javax.xml.ws.soap.SOAPFaultException: Cannot create a secure XMLInputFactory</td><td>-Dorg.apache.cxf.stax.allowInsecureParser=1</td></tr></tbody></table><h1 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h1><h2 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h2><p>改完文件之后要在控制台的“部署”里面进行更新，否则内容不会生效。改静态文件也是。</p><p>每次更新的时候，JVM会把Class信息保存到内存的永久保留区域中。如果Weblogic启动参数中的-XX:MaxPermSize比较小，那么更新几次可能就会卡死挂掉，而且应用日志会显示“java.lang.OutOfMemoryError: PermGen space”。在这种情况下，把Weblogic里面的服务器停掉然后再启动一次就好了。</p><p>在开始更新到更新结束，应用会出现短暂的中断，因此要注意选择合适的时间进行操作。</p><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><p>在Weblogic控制台重启服务的时候不要点完“启动”就不管了，一定要等到状态显示为“RUNNING”之后再闪人。如果变成“ADMIN”，那么可能是有报错，若确认不耽误事那么在控制台点一下“恢复”就好了。</p><h2 id="打补丁"><a href="#打补丁" class="headerlink" title="打补丁"></a>打补丁</h2><p>安装补丁之前，需要检查bsu.sh文件（例如/opt/Oracle/Middleware/utils/bsu/bsu.sh），将其中的最大内存Xmx改大些，例如-Xmx2048m，否则打补丁时可能会报java.lang.OutOfMemoryError，耽误时间。</p><p>打补丁可以随时操作，但是打完之后需要重启Weblogic才能生效。</p><h2 id="搬家"><a href="#搬家" class="headerlink" title="搬家"></a>搬家</h2><p>尽量不要搬家，因为Weblogic安装和建域之后会产生很多已经写好了路径的配置文件。即使将它们全部改成新路径，Middleware目录中还有个registry.dat，此文件记录了Weblogic的安装情况而且已经加密，如果贸然搬家会在升级等方面遇到麻烦。实在需要的话还是建立软链接比较好。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文记录我在部署Weblogic时遇到的各种坑。其中JDK为1.6，Weblogic版本10.3.6。&lt;br&gt;
    
    </summary>
    
      <category term="经验" scheme="https://infnan.github.io/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Weblogic" scheme="https://infnan.github.io/tags/Weblogic/"/>
    
      <category term="坑" scheme="https://infnan.github.io/tags/%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>给校招新员工分享的一点人生的经验</title>
    <link href="https://infnan.github.io/2018/07/15/to-new-employee/"/>
    <id>https://infnan.github.io/2018/07/15/to-new-employee/</id>
    <published>2018-07-14T16:00:00.000Z</published>
    <updated>2018-09-01T17:59:30.932Z</updated>
    
    <content type="html"><![CDATA[<p>我不是长者，不是新闻工作者，工作时间不长，见得也不够多，但是还是有必要向校招来的新员工分享一点人生的经验。<br><a id="more"></a></p><h1 id="别让自己挨骂"><a href="#别让自己挨骂" class="headerlink" title="别让自己挨骂"></a>别让自己挨骂</h1><p>第一印象很重要，而且软件开发是团队工作，如果一开始就给人留下好印象，以后也会过得舒服些；如果不认真工作，或者干得太差劲，给人留下坏印象，那么以后的日子也会过得不舒服。改变印象并不容易，因此入职初期就应当注意工作方法，千万不要犯忌。</p><h2 id="及时报告"><a href="#及时报告" class="headerlink" title="及时报告"></a>及时报告</h2><p>中国有句古话叫做“闷声发大财”，但是软件开发工作需要经常沟通，所以闷声发不了财。以下两点值得特别注意：</p><ol><li>领导和同事安排的任务，完成之后一定要报告。大家都很忙，不可能一直盯着你的进度，而且很多任务需要按顺序进行，如果你早就完成却不吱声，有可能耽误事，甚至被误会成没工作。</li><li>如果遇到困难，可能无法在预期时间内完成任务，一定要立刻汇报。及早暴露问题通常不会挨骂，而且能让领导和同事及时研究对策。假如给你分配一个限一周内完成的任务，你等到最后一天领导问你的时候才说“自己什么都不会，所以没做出来”，后果可想而知。</li></ol><p>工作过程中会经常遇到问题，包括技术方面的、业务方面的以及现实层面的。有问题很正常，但是攒着不解决就不正常了。遇到问题的时候，可以先尝试找资料，如果还是无法理解，或者忙活了两三个小时还是没有进展，那么请直接去找同事。很多时候你解决不了的问题，有经验的同事很快就能解决。</p><h2 id="注意记录"><a href="#注意记录" class="headerlink" title="注意记录"></a>注意记录</h2><p>重要事项应当作记录，而且要及时维护。像需求变更、数据库表结构变更之类的重要变更，或者是数据库表结构这种需要各库同步的东西，如果没有准确的记录，结果会很糟糕。</p><p>与用户或其他单位交流时更要注意留存证据，有条件的话最好截图/录音。开会、评审等活动必须有会议纪要和与会者的签名，以保障自己的利益。</p><p>开发工作中经常有很多琐事和问题，这些也应当记录下来，不然的话很快就忘记了。除此之外，建议不定期地总结一下自己手头的工作，完善程序注释，并且写出一些文档（例如自制构件的使用方法、某项工作的操作步骤或者配置注意事项等）。这种文档不是为了交差或者给领导汇报，而是为了方便让别人帮忙或把工作推出去。</p><div class="callout callout-note">                <div class="callout-title">记录的形式</div>                <p>记录的形式很多，例如：</p><ol><li>纸质记录：笔记本、便利贴</li><li>以笔记形式记录：OneNote、Evernote、Leanote</li><li>以博客形式记录：WordPress、Hexo</li><li>以维基形式记录：MediaWiki</li></ol><p>如果程序会暴露到互联网上，请注意保护个人隐私和公司机密。</p>            </div><h2 id="避免挖坑"><a href="#避免挖坑" class="headerlink" title="避免挖坑"></a>避免挖坑</h2><p>我觉得，如果你在同事中的口碑很差，那么大概有三种可能：一种是太烦人，一种是根本不好好干活，还有一种是老给其他人挖坑。挖坑的情况有很多种，比方说代码极其难懂，或者留下了很久以后才被发现的缺陷，或者经常制造缺陷，或者把好好的东西改坏等等。</p><p>后来者不熟悉项目情况，无论水平多高，接手新工作都有可能出问题，所以工作时候务必细心，抠得细一些，不懂要多提问。事实上，除非为了纯粹地赶进度，我们要的不是迅速完成工作，而是在合理时间范围内尽可能高质量地完成工作。</p><p>建议一开始不要急着投入工作。先去花点时间，大概了解一下自己工作的内容，了解相关的业务场景和需求。换句话说，先去弄清楚：项目是做什么的？我手头的工作是做什么的？面向的群体是谁？目标群体的关注点是什么？</p><p>投入实际开发之前肯定要搭建开发环境。不要光想着成功启动，有闲工夫的话还要了解一下项目的大概代码结构、系统概况，了解各环境与数据库，掌握编码规范、开发规范或注意事项等，搞清楚什么事情不能做，什么事情需要请示或评审。</p><p>若可以通过仿写其他代码来完成工作，那么建议找熟悉程序的老员工来评估一下代码质量，让他们确认一下有没有前人挖过的坑。</p><p>开发完成之后务必要自测，而且不要光测合法情况，还要测试非法情况。如果是修改功能，那么要测一下原来的功能还能否正常工作。鉴于新人不熟悉项目，老员工有必要主动去评审代码，指导或监督新人进行测试，而且“授人以鱼不如授人以渔”。</p><h1 id="提高知识水平"><a href="#提高知识水平" class="headerlink" title="提高知识水平"></a>提高知识水平</h1><p>无论准备往技术方向发展，还是往管理方向发展，都要提高自己的知识水平。</p><p>一开始什么都不懂是正常现象。学校所学基本上与工作脱节，所以实际上很多人都是白纸一张。这也意味着自学能力非常重要，毕竟工作一段时间之后还是什么都不懂就不正常了。</p><h2 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h2><p>在技术方面遇到问题，建议直接用Google搜英语，搜不到的话可以去StackOverflow上面提问。想找一些程序的话，也可以去GitHub搜一下有没有现成的开源程序。有很多问题用英语可以比较容易地找到答案，但是用百度搜只能搜到翻来覆去的重复结果，或者干脆搜不到。</p><div class="callout callout-note">                <div class="callout-title">关于翻墙</div>                <p>我觉得翻墙就应该是一种常识般的存在。如果没翻过墙，可以先去<a href="https://vultr.com" target="_blank" rel="noopener">Vultr</a>买台服务器，用<a href="https://teddysun.com/486.html" target="_blank" rel="noopener">这里</a>和<a href="https://teddysun.com/489.html" target="_blank" rel="noopener">这里</a>的脚本安装服务器端Shadowsocks，然后再<a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">下载客户端</a>，与服务器进行连接。</p><p>稍微离个题，很多人在翻墙之后会很自然地试图接触政治内容，我的建议是：不要随便参与政治，无论它是你所认为的正确内容还是错误内容。墙外的情况很复杂，什么人都有，而且很多事情和你想的完全不一样。如果看到与自己认识不同的言论之后情绪激动，那么请直接远离政治，不要尝试去捍卫正确立场。乱来的话只会让自己不爽，甚至招来麻烦。</p>            </div><h2 id="加班"><a href="#加班" class="headerlink" title="加班"></a>加班</h2><p>如果还没抱老婆孩子，也不急着操心安家的事情，建议平时稍微加点班。不是因为工作干不完或者干额外工作而加班，而是挤一些闲工夫来加强学习。工作很辛苦，精力不会再像学生时候那样旺盛，两三年以后可能连刷夜打游戏都扛不住，所以充电要趁早。</p><h2 id="玩"><a href="#玩" class="headerlink" title="玩"></a>玩</h2><p>这里的“玩”指的不是打游戏，而是在技术层面上折腾，<a href="https://program-think.blogspot.com/2017/04/The-Importance-of-Zheteng.html" target="_blank" rel="noopener">通过折腾来提升自己的水平</a>。</p><p>以我自己举例：</p><ol><li>花点时间学习一门副语言Python，写一些小程序玩。有需要的话便可以随手写一个辅助工作的脚本，例如调试接口等。</li><li>搞一个VPS，除了用来翻墙，还能用来学习Linux系统管理（<a href="/plus1s">也可以用来续秒</a>）。折腾LAMP之类东西还有助于加深对网络的认识。</li><li>在目前参与开发的系统中乱点，自己造数据来办理业务，有助于加深对系统整体和各具体业务的了解。另外为了快速准备业务数据需要使用PL/SQL。</li></ol><div class="callout callout-note">                <div class="callout-title">VPS</div>                <p>假如只是折腾玩，对网络没有特殊要求，建议搞国外主机，一方面是因为比国内便宜，另一方面是因为<a href="http://cn.uncyclopedia.wikia.com/wiki/%E6%9C%89%E5%85%B3%E9%83%A8%E9%97%A8" target="_blank" rel="noopener">有关部门</a>管不着，不需要乱七八糟的手续。</p><p>折腾VPS需要花钱，建议提前准备一张有VISA或MasterCard标志的信用卡。另外，如果已经搞到VISA/MasterCard卡，可以去Google Compute Engine注册新用户，把信用卡绑上，然后就可以免费使用一年。</p>            </div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我不是长者，不是新闻工作者，工作时间不长，见得也不够多，但是还是有必要向校招来的新员工分享一点人生的经验。&lt;br&gt;
    
    </summary>
    
      <category term="经验" scheme="https://infnan.github.io/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="工作" scheme="https://infnan.github.io/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>跨公司接口联调</title>
    <link href="https://infnan.github.io/2018/07/14/cross-company-debug/"/>
    <id>https://infnan.github.io/2018/07/14/cross-company-debug/</id>
    <published>2018-07-13T16:00:00.000Z</published>
    <updated>2018-09-01T17:59:30.918Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下在联调前后需要考虑的事情，以及内网穿透的操作方法。<br><a id="more"></a> </p><h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><ol><li>确保双方对于每个函数、每个参数的理解是一致的。特别是业务系统，对方对业务场景与业务的理解可能与我们很不一样；</li><li>搞清楚接口调用时机、频率，估计一下接口调用数据规模，避免因为频率不当或者数据规模太大而出问题；</li><li>有异常处理机制，能够正确处理目标服务器宕机、返回404、长时间不返回等情况。接口恢复后，故障期间产生的数据能够正确消化掉；</li><li>检查输入数据是否合法；</li><li>对于有状态的数据，约定好重复发送请求的后果。</li></ol><h1 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h1><p><strong>务必要留证据！</strong>有据可查，可以尽量避免承担无谓责任，尽量避免扯皮的情况。具体而言：</p><ol><li>记录哪天、与哪个人、调试了什么东西、结果如何；</li><li>各接口函数要输出日志，记录时间、原始数据和一些关键数据；</li><li>重要内容留截图。</li></ol><h1 id="补充技巧：内网穿透"><a href="#补充技巧：内网穿透" class="headerlink" title="补充技巧：内网穿透"></a>补充技巧：内网穿透</h1><p>理想情况下应该建立一个双方都便于访问的开发测试区。如果没有条件或者来不及准备，而且双方公司都能访问互联网，可以通过内网穿透的方法把本地应用映射到公网上。</p><p>操作之前去搞一台VPS。我个人推荐<a href="https://vultr.com" target="_blank" rel="noopener">Vultr</a>，因为国外不需要实名认证，而且Vultr按使用时间计费，可以随时买随时扔。对于内网穿透而言，最低配置的VPS足矣。</p><p>以Ubuntu系统为例，使用之前先在公司Ping一下，Ping不通说明被墙了，销毁之后再买一台即可。没问题的话，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>将其中的<code>GatewayPorts no</code>改成<code>yes</code>，没找到的话就在文件末尾追加一行，保存。然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart sshd</span><br></pre></td></tr></table></figure><p>准备工作就做好了。</p><p>联调时先去下载PuTTY，启动，在里面输入服务器地址和端口（默认22），并且按下图进行设置</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/cross-company-debug/putty-tunnel.png" alt="PuTTY设置" title="">                </div>                <div class="image-caption">PuTTY设置</div>            </figure><p>不要忘记点Add按钮。假如本机是<code>http://172.18.106.3:8080</code>，服务器IP是198.13.60.108，你选择的端口是8080，那么登录成功后就可以通过<code>http://198.13.60.108:8080</code>来访问自己的应用了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一下在联调前后需要考虑的事情，以及内网穿透的操作方法。&lt;br&gt;
    
    </summary>
    
      <category term="经验" scheme="https://infnan.github.io/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Web" scheme="https://infnan.github.io/tags/Web/"/>
    
      <category term="内网穿透" scheme="https://infnan.github.io/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Web应用部署注意事项</title>
    <link href="https://infnan.github.io/2018/05/15/deployment/"/>
    <id>https://infnan.github.io/2018/05/15/deployment/</id>
    <published>2018-05-14T16:00:00.000Z</published>
    <updated>2018-09-01T17:59:30.937Z</updated>
    
    <content type="html"><![CDATA[<p>部署Web应用是一项细活：它的配置和操作通常涉及各方面，而且要求准确无误。平时注意配置管理，工作认真负责，方可保证应用正常上线运行。<br><a id="more"></a> </p><h1 id="部署之前"><a href="#部署之前" class="headerlink" title="部署之前"></a>部署之前</h1><h2 id="开发时"><a href="#开发时" class="headerlink" title="开发时"></a>开发时</h2><p>早在开发阶段就应当注意整理和维护应用配置，包括但不限于：</p><ol><li>各数据源的配置（地址、端口、实例、用户名、密码）与涉及的配置文件；</li><li>外部接口的地址（IP、端口、路径等）与涉及的配置文件；</li><li>依赖的外部程序（例如ImageMagick等）；</li><li>应用中开发模式/生产模式的切换开关（如果有的话）；</li><li>涉及文件操作的目录路径（如果需要在应用程序目录中读写文件的话）；</li><li>准确的数据库表结构（字段名、类型、长度、Nullable）、索引、序列（如使用Oracle等数据库）、触发器、存储过程、函数以及字典数据内容。在维护数据库时应注意同步数据库设计文档、开发库、测试库，系统部署时还要同步维护生产库。</li></ol><p>开发过程中，如无特殊需求，应避免将应用地址、端口或路径写死，否则的话，一旦需要更换地址或路径就会遇到很大的麻烦。</p><h2 id="上线前"><a href="#上线前" class="headerlink" title="上线前"></a>上线前</h2><p>准备部署之前，应完整识别出开发/测试环境与生产环境配置的差异，避免疏漏。除此之外，强烈建议对各服务器资源和部署步骤进行记录，例如：</p><ol><li>各服务器内网IP地址、公网IP地址、操作系统、CPU、内存、硬盘空间；</li><li>各服务器用途（数据库/应用节点/负载均衡等）；</li><li>各服务器主要应用及版本；</li><li>各服务器登录方式；</li><li>应用或数据部署路径；</li><li>系统设置，包括防火墙、参数设定等。</li></ol><p>操作生产环境之前，最好找个类似的测试环境进行测试，了解如何处理意外情况（例如断电、死机、系统慢等）。</p><p>如果预计需要频繁部署，建议写部署脚本。</p><h1 id="部署中"><a href="#部署中" class="headerlink" title="部署中"></a>部署中</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>部署数据库时应注意：</p><ol><li>确保数据库软件已正确安装和启动；</li><li>表空间、账号密码正确；</li><li>字符集配置正确；</li><li>正确建立表结构、索引、序列、触发器、存储过程、函数等；对于升级，正确将旧结构修改成新结构；</li><li>正确初始化字典数据；</li><li>根据实际情况调整连接数和 Max open files 等设置。</li></ol><h2 id="应用服务器"><a href="#应用服务器" class="headerlink" title="应用服务器"></a>应用服务器</h2><p>部署应用时需要注意：</p><ol><li>各软件（如Apache、PHP和应用所需外部程序）已正确安装，环境变量、端口、证书（HTTPS）正确配置；</li><li>程序代码或编译后文件已放到正确位置；</li><li>如果应用不是以root身份启动，那么程序文件已设置正确所有者；</li><li>应用程序配置、数据源已按生产环境进行修改；</li><li>系统防火墙和相关外部接口已正确配置；</li><li>如果系统规模较大，Max open files 数量（/etc/security/limits.conf）和 fs.file-max（/etc/sysctl.conf）已进行调整；</li><li>了解如何取用后台日志。</li></ol><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><ol><li>注意各节点应配置好；</li><li>注意负载均衡算法的选择；</li><li>注意会话保持的设置。</li></ol><h1 id="部署之后"><a href="#部署之后" class="headerlink" title="部署之后"></a>部署之后</h1><p>部署时或部署完成后，仍然要对资源和使用情况进行整理总结，以便后续运维。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;部署Web应用是一项细活：它的配置和操作通常涉及各方面，而且要求准确无误。平时注意配置管理，工作认真负责，方可保证应用正常上线运行。&lt;br&gt;
    
    </summary>
    
      <category term="经验" scheme="https://infnan.github.io/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
      <category term="Web" scheme="https://infnan.github.io/tags/Web/"/>
    
  </entry>
  
</feed>
